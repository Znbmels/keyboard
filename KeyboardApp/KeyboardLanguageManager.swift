//
//  KeyboardLanguageManager.swift
//  KeyboardApp
//
//  Created by Zainab on 19.06.2025.
//

import Foundation

// MARK: - Language Enum for Keyboard
enum KeyboardLanguage: String, CaseIterable, Codable {
    case english = "en"
    case russian = "ru"
    case kazakh = "kk"
    case arabic = "ar"
    case french = "fr"
    case german = "de"
    case chinese = "zh"
    case hindi = "hi"
    case kyrgyz = "ky"
    case uzbek = "uz"
    case korean = "ko"
    case urdu = "ur"
    case spanish = "es"
    case italian = "it"

    var displayName: String {
        switch self {
        case .english:
            return "English"
        case .russian:
            return "–†—É—Å—Å–∫–∏–π"
        case .kazakh:
            return "“ö–∞–∑–∞“õ—à–∞"
        case .arabic:
            return "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
        case .french:
            return "Fran√ßais"
        case .german:
            return "Deutsch"
        case .chinese:
            return "‰∏≠Êñá"
        case .hindi:
            return "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä"
        case .kyrgyz:
            return "–ö—ã—Ä–≥—ã–∑—á–∞"
        case .uzbek:
            return "O'zbekcha"
        case .korean:
            return "ÌïúÍµ≠Ïñ¥"
        case .urdu:
            return "ÿßÿ±ÿØŸà"
        case .spanish:
            return "Espa√±ol"
        case .italian:
            return "Italiano"
        }
    }

    var flag: String {
        switch self {
        case .english:
            return "üá∫üá∏"
        case .russian:
            return "üá∑üá∫"
        case .kazakh:
            return "üá∞üáø"
        case .arabic:
            return "üá∏üá¶"
        case .french:
            return "üá´üá∑"
        case .german:
            return "üá©üá™"
        case .chinese:
            return "üá®üá≥"
        case .hindi:
            return "üáÆüá≥"
        case .kyrgyz:
            return "üá∞üá¨"
        case .uzbek:
            return "üá∫üáø"
        case .korean:
            return "üá∞üá∑"
        case .urdu:
            return "üáµüá∞"
        case .spanish:
            return "üá™üá∏"
        case .italian:
            return "üáÆüáπ"
        }
    }

    var shortName: String {
        switch self {
        case .english:
            return "Eng"
        case .russian:
            return "–†—É—Å"
        case .kazakh:
            return "“ö–∞–∑"
        case .arabic:
            return "ÿπÿ±ÿ®"
        case .french:
            return "Fra"
        case .german:
            return "Deu"
        case .chinese:
            return "‰∏≠Êñá"
        case .hindi:
            return "‡§π‡§ø‡§Ç"
        case .kyrgyz:
            return "–ö—ã—Ä"
        case .uzbek:
            return "O'z"
        case .korean:
            return "ÌïúÍµ≠"
        case .urdu:
            return "ÿßÿ±ÿØŸà"
        case .spanish:
            return "Esp"
        case .italian:
            return "Ita"
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ –¥–ª—è —è–∑—ã–∫–∞
    var isRTL: Bool {
        switch self {
        case .arabic, .urdu:
            return true
        default:
            return false
        }
    }
}

// MARK: - Arabic Display Mode
enum ArabicDisplayMode: String, CaseIterable {
    case arabic = "arabic"           // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    case englishTranslation = "english_translation"  // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥

    var displayName: String {
        switch self {
        case .arabic:
            return NSLocalizedString("arabic_display_arabic", comment: "")
        case .englishTranslation:
            return NSLocalizedString("arabic_display_english", comment: "")
        }
    }
}

// MARK: - Keyboard Language Manager
class KeyboardLanguageManager {
    static let shared = KeyboardLanguageManager()
    
    private let userDefaults: UserDefaults
    private let languageKey = "selected_language" // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª—é—á, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    private let availableLanguagesKey = "keyboard_available_languages"
    private let arabicLanguagePreferenceKey = "arabic_language_preference"
    private let arabicDuaLanguagePreferenceKey = "arabic_dua_language_preference"
    private let arabicDisplayModeKey = "arabic_display_mode"

    var currentLanguage: KeyboardLanguage {
        didSet {
            saveLanguage()
        }
    }

    var arabicLanguagePreference: KeyboardLanguage? {
        if let savedArabicLang = userDefaults.string(forKey: arabicLanguagePreferenceKey),
           let arabicLang = KeyboardLanguage(rawValue: savedArabicLang) {
            return arabicLang
        }
        return nil
    }

    var arabicDuaLanguagePreference: KeyboardLanguage? {
        if let savedArabicDuaLang = userDefaults.string(forKey: arabicDuaLanguagePreferenceKey),
           let arabicDuaLang = KeyboardLanguage(rawValue: savedArabicDuaLang) {
            return arabicDuaLang
        }
        return nil
    }

    var arabicDisplayMode: ArabicDisplayMode {
        if let savedArabicDisplayMode = userDefaults.string(forKey: arabicDisplayModeKey),
           let arabicDisplayMode = ArabicDisplayMode(rawValue: savedArabicDisplayMode) {
            return arabicDisplayMode
        }
        return .arabic // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    func shouldUseArabicForCurrentLanguage() -> Bool {
        return arabicLanguagePreference == currentLanguage
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä–∞–±—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥—É–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
    func shouldUseArabicForDuaCurrentLanguage() -> Bool {
        return arabicDuaLanguagePreference == currentLanguage
    }

    // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    var showArabicInKeyboard: Bool {
        return arabicLanguagePreference != nil
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞—Ä–∞–±—Å–∫–∏–π –¥–ª—è –¥—É–∞
    var showArabicDuaInKeyboard: Bool {
        return arabicDuaLanguagePreference != nil
    }

    var availableLanguages: [KeyboardLanguage] {
        if let languageData = userDefaults.data(forKey: availableLanguagesKey),
           let languageStrings = try? JSONDecoder().decode([String].self, from: languageData) {
            let keyboardLanguages = languageStrings.compactMap { KeyboardLanguage(rawValue: $0) }
            return keyboardLanguages.isEmpty ? [.english, .russian] : keyboardLanguages
        }
        return [.english, .russian] // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±–∞ —è–∑—ã–∫–∞
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
    var shouldShowLanguageToggle: Bool {
        return availableLanguages.count > 1
    }
    
    private init() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º App Groups –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        self.userDefaults = UserDefaults(suiteName: "group.school.nfactorial.muslim.keyboard") ?? UserDefaults.standard
        
        // Load saved language or default to English
        if let savedLanguage = userDefaults.string(forKey: languageKey),
           let language = KeyboardLanguage(rawValue: savedLanguage) {
            self.currentLanguage = language
        } else {
            self.currentLanguage = .english
        }
    }
    
    private func saveLanguage() {
        userDefaults.set(currentLanguage.rawValue, forKey: languageKey)
        userDefaults.synchronize()
    }
    
    func toggleLanguage() {
        let available = availableLanguages
        guard available.count > 1 else { return } // –ù–µ—á–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å

        if let currentIndex = available.firstIndex(of: currentLanguage) {
            let nextIndex = (currentIndex + 1) % available.count
            currentLanguage = available[nextIndex]
        } else {
            currentLanguage = available.first ?? .english
        }
    }

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    func refreshLanguageFromMainApp() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–æ—Å—Ç—É–ø–µ–Ω
        let available = availableLanguages
        if !available.contains(currentLanguage) {
            print("üîÑ KeyboardLanguageManager: Current language not available, switching to: \(available.first ?? .english)")
            currentLanguage = available.first ?? .english
        }

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if let savedLanguage = userDefaults.string(forKey: languageKey),
           let language = KeyboardLanguage(rawValue: savedLanguage) {
            if language != currentLanguage && available.contains(language) {
                print("üîÑ KeyboardLanguageManager: Language updated from main app: \(language)")
                currentLanguage = language
            }
        }

        print("üåç KeyboardLanguageManager: Available languages: \(available)")
        print("üåç KeyboardLanguageManager: Current language: \(currentLanguage)")
        print("üîò KeyboardLanguageManager: Should show toggle: \(shouldShowLanguageToggle)")
    }
}
