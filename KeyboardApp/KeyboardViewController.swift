import UIKit
import Foundation

// MARK: - Sticker Models (Simplified for Keyboard Extension)
struct SavedSticker: Codable, Identifiable {
    let id: String
    let prompt: String
    let contentType: String
    let imageData: Data
    let createdAt: Date

    init(id: String = UUID().uuidString, prompt: String, contentType: String, imageData: Data) {
        self.id = id
        self.prompt = prompt
        self.contentType = contentType
        self.imageData = imageData
        self.createdAt = Date()
    }
}

// Simplified StickerManager for Keyboard Extension
class StickerManager {
    static let shared = StickerManager()

    let userDefaults = UserDefaults(suiteName: "group.school.nfactorial.muslim.keyboard") ?? UserDefaults.standard
    private let stickersKey = "saved_stickers"

    var savedStickers: [SavedSticker] = []

    private init() {
        loadStickers()
    }

    func getStickersForKeyboard() -> [SavedSticker] {
        print("üé® getStickersForKeyboard called")

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserDefaults
        loadStickers()

        print("üé® Total saved stickers: \(savedStickers.count)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å—Ç–∏–∫–µ—Ä—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        let stickersEnabled = userDefaults.object(forKey: "stickers_enabled_in_keyboard") as? Bool ?? true
        print("üé® Stickers enabled in keyboard: \(stickersEnabled)")
        guard stickersEnabled else {
            print("üé® Stickers disabled, returning empty array")
            return []
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if let data = userDefaults.data(forKey: "selected_stickers_for_keyboard"),
           let selectedIds = try? JSONDecoder().decode(Set<String>.self, from: data) {
            print("üé® ===== KEYBOARD STICKER FILTERING DEBUG =====")
            print("üé® Found selected stickers data: \(selectedIds.count) IDs")
            print("üé® Selected IDs from settings: \(Array(selectedIds))")
            print("üé® Available stickers: \(savedStickers.count)")

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
            for (index, sticker) in savedStickers.enumerated() {
                print("üé® Available sticker \(index): '\(sticker.prompt)' (ID: \(sticker.id))")
            }

            let selectedStickers = savedStickers.filter { selectedIds.contains($0.id) }
            print("üé® Filtered selected stickers: \(selectedStickers.count)")

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º —Å—Ç–∏–∫–µ—Ä–µ
            for sticker in savedStickers {
                let isSelected = selectedIds.contains(sticker.id)
                print("üé® Sticker '\(sticker.prompt)' (ID: \(sticker.id)) - Selected: \(isSelected)")
            }

            if !selectedStickers.isEmpty {
                print("üé® ‚úÖ Returning \(selectedStickers.count) selected stickers")
                for (index, sticker) in selectedStickers.enumerated() {
                    print("üé® Final sticker \(index): '\(sticker.prompt)'")
                }
                return selectedStickers
            } else {
                print("üé® ‚ùå No matching selected stickers found, returning empty array")
                print("üé® This means the IDs in settings don't match any actual sticker IDs")
                return []
            }
        } else {
            print("üé® ‚ö†Ô∏è No selection data found in UserDefaults, returning all \(savedStickers.count) stickers")
            return savedStickers
        }
    }

    func shouldShowStickersButton() -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å—Ç–∏–∫–µ—Ä—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        let stickersEnabled = userDefaults.object(forKey: "stickers_enabled_in_keyboard") as? Bool ?? true
        print("üé® shouldShowStickersButton - enabled: \(stickersEnabled), stickers count: \(savedStickers.count)")

        // –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if savedStickers.isEmpty {
            print("üé® No stickers found, creating demo stickers for keyboard...")
            createDemoStickersForKeyboard()
        }

        return stickersEnabled && !savedStickers.isEmpty
    }

    func createStickerPreview(sticker: SavedSticker, size: CGSize = CGSize(width: 35, height: 35)) -> UIImage? {
        guard let originalImage = UIImage(data: sticker.imageData) else { return nil }

        let renderer = UIGraphicsImageRenderer(size: size)
        return renderer.image { context in
            // –†–∏—Å—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: size))

            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
            let imageRect = CGRect(
                x: 2,
                y: 2,
                width: size.width - 4,
                height: size.height - 4
            )
            originalImage.draw(in: imageRect)

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫—É—é —Å–µ—Ä—É—é —Ä–∞–º–∫—É
            UIColor.systemGray3.setStroke()
            let path = UIBezierPath(roundedRect: CGRect(origin: .zero, size: size), cornerRadius: 6)
            path.lineWidth = 0.5
            path.stroke()
        }
    }

    func loadStickers() {
        print("üì± Keyboard: Loading stickers from UserDefaults...")
        print("üì± Keyboard: Using standard UserDefaults")

        guard let data = userDefaults.data(forKey: stickersKey) else {
            print("üì± Keyboard: –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∫–ª—é—á–µ '\(stickersKey)'")

            // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–ª—é—á–∏ –≤ UserDefaults
            let allKeys = userDefaults.dictionaryRepresentation().keys
            print("üì± Keyboard: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –≤ UserDefaults: \(Array(allKeys))")
            return
        }

        do {
            savedStickers = try JSONDecoder().decode([SavedSticker].self, from: data)
            print("üì± Keyboard: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: \(savedStickers.count)")
            for (index, sticker) in savedStickers.enumerated() {
                print("üì± Keyboard: –°—Ç–∏–∫–µ—Ä \(index): \(sticker.prompt)")
            }
        } catch {
            print("‚ùå Keyboard: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: \(error)")
            savedStickers = []
        }
    }

    func createDemoStickersForKeyboard() {
        print("üé® Creating demo stickers for keyboard...")
        let demoPrompts = [
            "ÿ®Ÿêÿ≥ŸíŸÖŸê ÿßŸÑŸÑŸéŸëŸáŸê",
            "ÿßŸÑŸíÿ≠ŸéŸÖŸíÿØŸè ŸÑŸêŸÑŸéŸëŸáŸê",
            "ÿ≥Ÿèÿ®Ÿíÿ≠ŸéÿßŸÜŸé ÿßŸÑŸÑŸéŸëŸáŸê",
            "ÿßŸÑŸÑŸéŸëŸáŸè ÿ£ŸéŸÉŸíÿ®Ÿéÿ±Ÿè",
            "ÿ£Ÿéÿ≥Ÿíÿ™Ÿéÿ∫ŸíŸÅŸêÿ±Ÿè ÿßŸÑŸÑŸéŸëŸáŸé",
            "ŸÑŸéÿß ÿ•ŸêŸÑŸéŸáŸé ÿ•ŸêŸÑŸéŸëÿß ÿßŸÑŸÑŸéŸëŸáŸè",
            "ŸÖŸéÿß ÿ¥Ÿéÿßÿ°Ÿé ÿßŸÑŸÑŸéŸëŸáŸè",
            "ÿ®Ÿéÿßÿ±ŸéŸÉŸé ÿßŸÑŸÑŸéŸëŸáŸè",
            "ÿ•ŸêŸÜŸí ÿ¥Ÿéÿßÿ°Ÿé ÿßŸÑŸÑŸéŸëŸáŸè",
            "ÿ¨Ÿéÿ≤ŸéÿßŸÉŸé ÿßŸÑŸÑŸéŸëŸáŸè ÿÆŸéŸäŸíÿ±Ÿãÿß",
            "ÿ±Ÿéÿ®ŸêŸë ÿßÿ∫ŸíŸÅŸêÿ±Ÿí ŸÑŸêŸä",
            "ÿßŸÑŸÑŸéŸëŸáŸèŸÖŸéŸë ÿµŸéŸÑŸêŸë ÿπŸéŸÑŸéŸâ ŸÖŸèÿ≠ŸéŸÖŸéŸëÿØŸç"
        ]

        var demoStickers: [SavedSticker] = []

        for prompt in demoPrompts {
            let image = createDemoStickerImage(text: prompt)
            if let imageData = image.pngData() {
                let sticker = SavedSticker(
                    prompt: prompt,
                    contentType: "TEXTUAL",
                    imageData: imageData
                )
                demoStickers.append(sticker)
            }
        }

        savedStickers = demoStickers

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UserDefaults
        do {
            let data = try JSONEncoder().encode(savedStickers)
            userDefaults.set(data, forKey: stickersKey)
            userDefaults.synchronize()
            print("üé® Demo stickers saved to UserDefaults: \(savedStickers.count)")
        } catch {
            print("‚ùå Failed to save demo stickers: \(error)")
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–º–æ-—Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        let allStickerIds = Set(demoStickers.map { $0.id })
        do {
            let selectionData = try JSONEncoder().encode(allStickerIds)
            userDefaults.set(selectionData, forKey: "selected_stickers_for_keyboard")
            userDefaults.synchronize()
            print("üé® All demo stickers selected for keyboard: \(allStickerIds.count)")
        } catch {
            print("‚ùå Failed to save demo sticker selection: \(error)")
        }
    }

    private func createDemoStickerImage(text: String) -> UIImage {
        let size = CGSize(width: 200, height: 200)
        let renderer = UIGraphicsImageRenderer(size: size)

        return renderer.image { context in
            // –ó–µ–ª—ë–Ω—ã–π —Ñ–æ–Ω
            UIColor.systemGreen.setFill()
            context.fill(CGRect(origin: .zero, size: size))

            // –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
            let attributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 24, weight: .bold),
                .foregroundColor: UIColor.white
            ]

            let attributedText = NSAttributedString(string: text, attributes: attributes)
            let textSize = attributedText.size()
            let textRect = CGRect(
                x: (size.width - textSize.width) / 2,
                y: (size.height - textSize.height) / 2,
                width: textSize.width,
                height: textSize.height
            )

            attributedText.draw(in: textRect)
        }
    }
}

// MARK: - Keyboard Layout Enums
enum KeyboardMode {
    case letters
    case numbers
    case symbols
    case islamic
}



// MARK: - Key Types
enum KeyType {
    case letter(String)
    case number(String)
    case symbol(String)
    case space
    case delete
    case shift
    case returnKey
    case numbers
    case symbols
    case globe
    case moon
    case islamicPhrase(String)
    case islamicDua(String)
    case islamicToggle
    case stickers
    case stickerBack
}

class KeyboardViewController: UIInputViewController {
    
    // MARK: - Properties
    private var keyboardView: UIView!
    private var currentMode: KeyboardMode = .letters
    private var currentLanguage: KeyboardLanguage = .english
    private var isShiftPressed = false
    private var isCapsLockOn = false
    
    private let languageManager = KeyboardLanguageManager.shared
    private let phrasesManager = KeyboardPhrasesManager.shared
    private let duaManager = KeyboardDuaManager.shared
    private let colorManager = KeyboardColorManager.shared
    private let stickerManager = StickerManager.shared
    
    private let keyboardHeight: CGFloat = 216 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ iOS –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private let keyHeight: CGFloat = 42
    private let keySpacing: CGFloat = 6
    private let rowSpacing: CGFloat = 10
    private let sideMargin: CGFloat = 3
    
    // MARK: - Lifecycle
    override func updateViewConstraints() {
        super.updateViewConstraints()
        
        let heightConstraint = NSLayoutConstraint(
            item: self.view!,
            attribute: .height,
            relatedBy: .equal,
            toItem: nil,
            attribute: .notAnAttribute,
            multiplier: 0.0,
            constant: keyboardHeight
        )
        heightConstraint.priority = UILayoutPriority(999)
        self.view.addConstraint(heightConstraint)
    }
    
    // MARK: - Keyboard Layouts
    private func getLetterLayout() -> [[KeyType]] {
        switch currentLanguage {
        case .english:
            return [
                [.letter("Q"), .letter("W"), .letter("E"), .letter("R"), .letter("T"), .letter("Y"), .letter("U"), .letter("I"), .letter("O"), .letter("P")],
                [.letter("A"), .letter("S"), .letter("D"), .letter("F"), .letter("G"), .letter("H"), .letter("J"), .letter("K"), .letter("L")],
                [.shift, .letter("Z"), .letter("X"), .letter("C"), .letter("V"), .letter("B"), .letter("N"), .letter("M"), .delete],
                [.numbers, .moon, .space, .symbol("."), .returnKey]
            ]
        case .russian:
            return [
                [.letter("–ô"), .letter("–¶"), .letter("–£"), .letter("–ö"), .letter("–ï"), .letter("–ù"), .letter("–ì"), .letter("–®"), .letter("–©"), .letter("–ó"), .letter("–•")],
                [.letter("–§"), .letter("–´"), .letter("–í"), .letter("–ê"), .letter("–ü"), .letter("–†"), .letter("–û"), .letter("–õ"), .letter("–î"), .letter("–ñ"), .letter("–≠")],
                [.shift, .letter("–Ø"), .letter("–ß"), .letter("–°"), .letter("–ú"), .letter("–ò"), .letter("–¢"), .letter("–¨"), .letter("–ë"), .letter("–Æ"), .delete],
                [.numbers, .moon, .space, .symbol("."), .returnKey]
            ]
        case .kazakh:
            return [
                [.letter("–ô"), .letter("–¶"), .letter("–£"), .letter("–ö"), .letter("–ï"), .letter("–ù"), .letter("–ì"), .letter("–®"), .letter("–©"), .letter("–ó"), .letter("–•")],
                [.letter("–§"), .letter("–´"), .letter("–í"), .letter("–ê"), .letter("–ü"), .letter("–†"), .letter("–û"), .letter("–õ"), .letter("–î"), .letter("–ñ"), .letter("–≠")],
                [.shift, .letter("–Ø"), .letter("–ß"), .letter("–°"), .letter("–ú"), .letter("–ò"), .letter("–¢"), .letter("–¨"), .letter("–ë"), .letter("–Æ"), .delete],
                [.numbers, .moon, .space, .symbol("."), .returnKey]
            ]
        case .arabic:
            return [
                [.letter("ÿ∂"), .letter("ÿµ"), .letter("ÿ´"), .letter("ŸÇ"), .letter("ŸÅ"), .letter("ÿ∫"), .letter("ÿπ"), .letter("Ÿá"), .letter("ÿÆ"), .letter("ÿ≠")],
                [.letter("ÿ¥"), .letter("ÿ≥"), .letter("Ÿä"), .letter("ÿ®"), .letter("ŸÑ"), .letter("ÿß"), .letter("ÿ™"), .letter("ŸÜ"), .letter("ŸÖ")],
                [.shift, .letter("ÿ∏"), .letter("ÿ∑"), .letter("ÿ∞"), .letter("ÿØ"), .letter("ÿ≤"), .letter("ÿ±"), .letter("Ÿà"), .delete],
                [.numbers, .moon, .space, .symbol("."), .returnKey]
            ]
        }
    }
    
    private func getNumberLayout() -> [[KeyType]] {
        return [
            [.number("1"), .number("2"), .number("3"), .number("4"), .number("5"), .number("6"), .number("7"), .number("8"), .number("9"), .number("0")],
            [.symbol("-"), .symbol("/"), .symbol(":"), .symbol(";"), .symbol("("), .symbol(")"), .symbol("$"), .symbol("&"), .symbol("@"), .symbol("\"")],
            [.symbols, .symbol("."), .symbol(","), .symbol("?"), .symbol("!"), .symbol("'"), .delete],
            [.letter("ABC"), .moon, .space, .returnKey]
        ]
    }
    
    private func getSymbolLayout() -> [[KeyType]] {
        return [
            [.symbol("["), .symbol("]"), .symbol("{"), .symbol("}"), .symbol("#"), .symbol("%"), .symbol("^"), .symbol("*"), .symbol("+"), .symbol("=")],
            [.symbol("_"), .symbol("\\"), .symbol("|"), .symbol("~"), .symbol("<"), .symbol(">"), .symbol("‚Ç¨"), .symbol("¬£"), .symbol("¬•")],
            [.numbers, .symbol("‚Ä¢"), .symbol("¬∞"), .symbol("‚Ä¶"), .symbol("¬ø"), .symbol("¬°"), .symbol("¬ß"), .delete],
            [.letter("ABC"), .moon, .space, .returnKey]
        ]
    }
    
    // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º –∏—Å–ª–∞–º—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private var islamicMode: IslamicKeyboardMode = .phrases
    private var scrollOffset: CGFloat = 0
    private var lastInsertedText: String?

    private enum IslamicKeyboardMode {
        case phrases
        case duas
    }

    private func getIslamicLayout() -> [[KeyType]] {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ—Ä–∞–∑/–¥—É–∞
        return [
            // –ù–∏–∂–Ω–∏–π —Ä—è–¥ —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            [.letter("ABC"), .islamicToggle, .globe, .space, .symbol("Ô∑∫"), .delete, .returnKey]
        ]
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // –û—Ç–ª–∞–¥–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        #if DEBUG
        debugResourceLoading()
        #endif

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫ —Å languageManager
        languageManager.refreshLanguageFromMainApp()
        currentLanguage = languageManager.currentLanguage

        setupKeyboard()

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–≤–µ—Ç–∞
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(colorThemeChanged),
            name: NSNotification.Name("KeyboardColorChanged"),
            object: nil
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(stickerSettingsChanged),
            name: NSNotification.Name("StickerSettingsChanged"),
            object: nil
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(stickerSelectionChanged),
            name: NSNotification.Name("StickerSelectionChanged"),
            object: nil
        )

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(stickerVisibilityChanged),
            name: NSNotification.Name("StickerVisibilityChanged"),
            object: nil
        )
    }

    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —è–∑—ã–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        languageManager.refreshLanguageFromMainApp()
        currentLanguage = languageManager.currentLanguage

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        colorManager.reloadThemeFromUserDefaults()

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.refreshKeyboardData()
        }
    }
    
    override func viewWillLayoutSubviews() {
        super.viewWillLayoutSubviews()
        updateAppearance()
    }
    
    override func textWillChange(_ textInput: UITextInput?) {
    }
    
    override func textDidChange(_ textInput: UITextInput?) {
        updateAppearance()
    }
    
    // MARK: - Setup Methods
    private func setupKeyboard() {
        view.backgroundColor = UIColor(red: 0.82, green: 0.84, blue: 0.86, alpha: 1.0) // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω –∫–∞–∫ —É iOS –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ subviews –µ—Å–ª–∏ –µ—Å—Ç—å
        view.subviews.forEach { $0.removeFromSuperview() }
        
        createKeyboardView()
    }
    
    private func createKeyboardView() {
        keyboardView = UIView()
        keyboardView.translatesAutoresizingMaskIntoConstraints = false
        keyboardView.backgroundColor = .clear
        view.addSubview(keyboardView)

        NSLayoutConstraint.activate([
            keyboardView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 8),
            keyboardView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: sideMargin),
            keyboardView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -sideMargin),
            keyboardView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -8)
        ])

        if currentMode == .islamic {
            createIslamicKeyboard()
        } else {
            createKeyRows()
        }
    }

    private func createIslamicKeyboard() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º—É
        colorManager.reloadThemeFromUserDefaults()

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã
        stickerManager.loadStickers()

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("üé® Islamic keyboard creation - stickers count: \(stickerManager.savedStickers.count)")
        print("üé® Islamic keyboard creation - should show button: \(stickerManager.shouldShowStickersButton())")

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        keyboardView.subviews.forEach { $0.removeFromSuperview() }

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ñ—Ä–∞–∑/–¥—É–∞
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.showsVerticalScrollIndicator = false
        keyboardView.addSubview(scrollView)

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ—Ä–∞–∑/–¥—É–∞
        let contentView = UIView()
        contentView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(contentView)

        // –°–æ–∑–¥–∞–µ–º –Ω–∏–∂–Ω–∏–π —Ä—è–¥ —Å —É–ø—Ä–∞–≤–ª—è—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        let controlRow = createControlRow()
        keyboardView.addSubview(controlRow)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        NSLayoutConstraint.activate([
            // ScrollView –∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å
            scrollView.topAnchor.constraint(equalTo: keyboardView.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: keyboardView.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: keyboardView.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: controlRow.topAnchor, constant: -rowSpacing),

            // ContentView –≤–Ω—É—Ç—Ä–∏ ScrollView
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),

            // –ù–∏–∂–Ω–∏–π —Ä—è–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            controlRow.leadingAnchor.constraint(equalTo: keyboardView.leadingAnchor),
            controlRow.trailingAnchor.constraint(equalTo: keyboardView.trailingAnchor),
            controlRow.bottomAnchor.constraint(equalTo: keyboardView.bottomAnchor),
            controlRow.heightAnchor.constraint(equalToConstant: keyHeight)
        ])

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        populateIslamicContent(in: contentView)
    }

    private func createControlRow() -> UIView {
        let controlRow = UIView()
        controlRow.translatesAutoresizingMaskIntoConstraints = false

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        let abcButton = createKeyButton(for: .letter("ABC"), rowIndex: 0, keyIndex: 0)
        let toggleButton = createKeyButton(for: .islamicToggle, rowIndex: 0, keyIndex: 1)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        let userDefaults = UserDefaults(suiteName: "group.school.nfactorial.muslim.keyboard") ?? UserDefaults.standard
        let shouldShowStickers = userDefaults.object(forKey: "stickers_enabled_in_keyboard") as? Bool ?? true
        var stickersButton: UIButton?

        if shouldShowStickers {
            print("üé® Creating stickers button...")
            print("üé® StickerManager saved stickers count: \(stickerManager.savedStickers.count)")

            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—Ç–∏–∫–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            stickerManager.loadStickers()

            // –ï—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –¥–µ–º–æ-—Å—Ç–∏–∫–µ—Ä—ã
            if stickerManager.savedStickers.isEmpty {
                stickerManager.createDemoStickersForKeyboard()
            }

            stickersButton = createKeyButton(for: .stickers, rowIndex: 0, keyIndex: 2)
            print("üé® Stickers button created successfully with \(stickerManager.savedStickers.count) stickers")
        } else {
            print("üé® Stickers button hidden by user setting")
        }

        let spaceButton = createKeyButton(for: .space, rowIndex: 0, keyIndex: 4)
        let sallaButton = createKeyButton(for: .symbol("Ô∑∫"), rowIndex: 0, keyIndex: 5)
        let deleteButton = createKeyButton(for: .delete, rowIndex: 0, keyIndex: 6)
        let returnButton = createKeyButton(for: .returnKey, rowIndex: 0, keyIndex: 7)

        controlRow.addSubview(abcButton)
        controlRow.addSubview(toggleButton)

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞
        if let stickersButton = stickersButton {
            controlRow.addSubview(stickersButton)
            print("üé® Stickers button added to controlRow")
        }

        controlRow.addSubview(spaceButton)
        controlRow.addSubview(sallaButton)
        controlRow.addSubview(deleteButton)
        controlRow.addSubview(returnButton)

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
        var languageButton: UIButton?
        if languageManager.shouldShowLanguageToggle {
            languageButton = createKeyButton(for: .globe, rowIndex: 0, keyIndex: 3)
            controlRow.addSubview(languageButton!)
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        var constraints: [NSLayoutConstraint] = []

        // –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–æ–∫
        var heightConstraints: [NSLayoutConstraint] = [
            abcButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor),
            toggleButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor),
            spaceButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor),
            sallaButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor),
            deleteButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor),
            returnButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor)
        ]

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if let stickersButton = stickersButton {
            heightConstraints.append(stickersButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor))
        }

        constraints.append(contentsOf: heightConstraints)

        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        var topConstraints: [NSLayoutConstraint] = [
            abcButton.topAnchor.constraint(equalTo: controlRow.topAnchor),
            toggleButton.topAnchor.constraint(equalTo: controlRow.topAnchor),
            spaceButton.topAnchor.constraint(equalTo: controlRow.topAnchor),
            sallaButton.topAnchor.constraint(equalTo: controlRow.topAnchor),
            deleteButton.topAnchor.constraint(equalTo: controlRow.topAnchor),
            returnButton.topAnchor.constraint(equalTo: controlRow.topAnchor)
        ]

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if let stickersButton = stickersButton {
            topConstraints.append(stickersButton.topAnchor.constraint(equalTo: controlRow.topAnchor))
        }

        constraints.append(contentsOf: topConstraints)

        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        constraints.append(contentsOf: [
            abcButton.leadingAnchor.constraint(equalTo: controlRow.leadingAnchor),
            abcButton.widthAnchor.constraint(equalToConstant: 40),

            toggleButton.leadingAnchor.constraint(equalTo: abcButton.trailingAnchor, constant: 6),
            toggleButton.widthAnchor.constraint(equalToConstant: 45)
        ])

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–±–µ–ª–æ–º
        let lastButtonBeforeSpace: UIButton
        if let stickersButton = stickersButton {
            constraints.append(contentsOf: [
                stickersButton.leadingAnchor.constraint(equalTo: toggleButton.trailingAnchor, constant: 6),
                stickersButton.widthAnchor.constraint(equalToConstant: 35)
            ])
            lastButtonBeforeSpace = stickersButton
        } else {
            lastButtonBeforeSpace = toggleButton
        }

        if let langButton = languageButton {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —è–∑—ã–∫–∞
            constraints.append(contentsOf: [
                langButton.heightAnchor.constraint(equalTo: controlRow.heightAnchor),
                langButton.topAnchor.constraint(equalTo: controlRow.topAnchor),
                langButton.leadingAnchor.constraint(equalTo: lastButtonBeforeSpace.trailingAnchor, constant: 6),
                langButton.widthAnchor.constraint(equalToConstant: 35),

                spaceButton.leadingAnchor.constraint(equalTo: langButton.trailingAnchor, constant: 6),
                spaceButton.widthAnchor.constraint(equalToConstant: 70)
            ])
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞, –ø—Ä–æ–±–µ–ª –±–æ–ª—å—à–µ
            let spaceWidth: CGFloat = 105 // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
            constraints.append(contentsOf: [
                spaceButton.leadingAnchor.constraint(equalTo: lastButtonBeforeSpace.trailingAnchor, constant: 6),
                spaceButton.widthAnchor.constraint(equalToConstant: spaceWidth)
            ])
        }

        constraints.append(contentsOf: [
            sallaButton.leadingAnchor.constraint(equalTo: spaceButton.trailingAnchor, constant: 6),
            sallaButton.widthAnchor.constraint(equalToConstant: 35),

            deleteButton.leadingAnchor.constraint(equalTo: sallaButton.trailingAnchor, constant: 6),
            deleteButton.widthAnchor.constraint(equalToConstant: 40),

            returnButton.leadingAnchor.constraint(equalTo: deleteButton.trailingAnchor, constant: 6),
            returnButton.trailingAnchor.constraint(equalTo: controlRow.trailingAnchor),
            returnButton.widthAnchor.constraint(equalToConstant: 45)
        ])

        NSLayoutConstraint.activate(constraints)

        return controlRow
    }

    private func populateIslamicContent(in contentView: UIView) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        contentView.subviews.forEach { $0.removeFromSuperview() }

        let items: [String]
        if islamicMode == .phrases {
            items = phrasesManager.selectedPhrases.map { $0.displayText(for: languageManager.currentLanguage) }
        } else {
            items = duaManager.selectedDuas.map { $0.displayText(for: languageManager.currentLanguage) }
        }

        guard !items.isEmpty else { return }

        var previousRow: UIView?
        let itemsPerRow = 2
        let buttonHeight: CGFloat = 55
        let buttonSpacing: CGFloat = 10
        let rowSpacing: CGFloat = 12

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in stride(from: 0, to: items.count, by: itemsPerRow) {
            let rowView = UIView()
            rowView.translatesAutoresizingMaskIntoConstraints = false
            contentView.addSubview(rowView)

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞
            var rowButtons: [UIButton] = []
            for j in 0..<itemsPerRow {
                let index = i + j
                if index < items.count {
                    let keyType: KeyType = islamicMode == .phrases ? .islamicPhrase(items[index]) : .islamicDua(items[index])
                    let button = createKeyButton(for: keyType, rowIndex: i/itemsPerRow, keyIndex: j)
                    rowView.addSubview(button)
                    rowButtons.append(button)
                }
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä—è–¥–∞
            NSLayoutConstraint.activate([
                rowView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
                rowView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
                rowView.heightAnchor.constraint(equalToConstant: buttonHeight)
            ])

            if let previous = previousRow {
                rowView.topAnchor.constraint(equalTo: previous.bottomAnchor, constant: rowSpacing).isActive = true
            } else {
                rowView.topAnchor.constraint(equalTo: contentView.topAnchor).isActive = true
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
            for (index, button) in rowButtons.enumerated() {
                NSLayoutConstraint.activate([
                    button.topAnchor.constraint(equalTo: rowView.topAnchor),
                    button.heightAnchor.constraint(equalTo: rowView.heightAnchor)
                ])

                if index == 0 {
                    button.leadingAnchor.constraint(equalTo: rowView.leadingAnchor).isActive = true
                } else {
                    button.leadingAnchor.constraint(equalTo: rowButtons[index-1].trailingAnchor, constant: buttonSpacing).isActive = true
                    button.widthAnchor.constraint(equalTo: rowButtons[0].widthAnchor).isActive = true
                }

                if index == rowButtons.count - 1 {
                    if rowButtons.count == 1 {
                        button.trailingAnchor.constraint(equalTo: rowView.trailingAnchor).isActive = true
                    } else {
                        // –î–ª—è –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫ –¥–µ–ª–∞–µ–º –∏—Ö —Ä–∞–≤–Ω—ã–º–∏ –ø–æ —à–∏—Ä–∏–Ω–µ
                        button.trailingAnchor.constraint(equalTo: rowView.trailingAnchor).isActive = true
                    }
                }
            }

            previousRow = rowView
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if let lastRow = previousRow {
            lastRow.bottomAnchor.constraint(equalTo: contentView.bottomAnchor).isActive = true
        }
    }
    
    private func createKeyRows() {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º—É
        colorManager.reloadThemeFromUserDefaults()

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboardView.subviews.forEach { $0.removeFromSuperview() }
        
        let layout = getCurrentLayout()
        
        for (rowIndex, row) in layout.enumerated() {
            let rowView = createRowView(for: row, rowIndex: rowIndex)
            keyboardView.addSubview(rowView)
            
            NSLayoutConstraint.activate([
                rowView.leadingAnchor.constraint(equalTo: keyboardView.leadingAnchor),
                rowView.trailingAnchor.constraint(equalTo: keyboardView.trailingAnchor),
                rowView.heightAnchor.constraint(equalToConstant: keyHeight)
            ])
            
            if rowIndex == 0 {
                rowView.topAnchor.constraint(equalTo: keyboardView.topAnchor).isActive = true
            } else {
                let previousRow = keyboardView.subviews[rowIndex - 1]
                rowView.topAnchor.constraint(equalTo: previousRow.bottomAnchor, constant: rowSpacing).isActive = true
            }
        }
    }
    
    private func getCurrentLayout() -> [[KeyType]] {
        switch currentMode {
        case .letters:
            return getLetterLayout()
        case .numbers:
            return getNumberLayout()
        case .symbols:
            return getSymbolLayout()
        case .islamic:
            return getIslamicLayout()
        }
    }

    private func createRowView(for row: [KeyType], rowIndex: Int) -> UIView {
        let rowView = UIView()
        rowView.translatesAutoresizingMaskIntoConstraints = false

        var buttons: [UIButton] = []

        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        for (keyIndex, keyType) in row.enumerated() {
            let button = createKeyButton(for: keyType, rowIndex: rowIndex, keyIndex: keyIndex)
            rowView.addSubview(button)
            buttons.append(button)

            // –í—ã—Å–æ—Ç–∞ –∫–Ω–æ–ø–∫–∏
            button.heightAnchor.constraint(equalTo: rowView.heightAnchor).isActive = true
            button.topAnchor.constraint(equalTo: rowView.topAnchor).isActive = true
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä—è–¥–∞
        setupRowConstraints(buttons: buttons, rowView: rowView, row: row, rowIndex: rowIndex)

        return rowView
    }

    private func setupRowConstraints(buttons: [UIButton], rowView: UIView, row: [KeyType], rowIndex: Int) {
        guard !buttons.isEmpty else { return }

        // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        buttons[0].leadingAnchor.constraint(equalTo: rowView.leadingAnchor).isActive = true

        // –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
        buttons.last!.trailingAnchor.constraint(equalTo: rowView.trailingAnchor).isActive = true

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
        for (index, button) in buttons.enumerated() {
            let keyType = row[index]

            if index > 0 {
                // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏
                button.leadingAnchor.constraint(equalTo: buttons[index-1].trailingAnchor, constant: keySpacing).isActive = true
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–∫–∏
            setButtonWidthConstraints(button: button, keyType: keyType, buttons: buttons, row: row)
        }
    }

    private func setButtonWidthConstraints(button: UIButton, keyType: KeyType, buttons: [UIButton], row: [KeyType]) {
        switch keyType {
        case .space:
            // –ü—Ä–æ–±–µ–ª - —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            button.widthAnchor.constraint(greaterThanOrEqualToConstant: 120).isActive = true
            break
        case .shift, .delete:
            // Shift –∏ Delete - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–∞–∫ –≤ iOS
            button.widthAnchor.constraint(equalToConstant: 42).isActive = true
        case .returnKey:
            // Return –∫–Ω–æ–ø–∫–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            button.widthAnchor.constraint(equalToConstant: 77).isActive = true
        case .numbers, .symbols, .letter("ABC"):
            // –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            button.widthAnchor.constraint(equalToConstant: 42).isActive = true
        case .moon, .globe:
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - –º–∞–ª–µ–Ω—å–∫–∏–µ –∫–∞–∫ –≤ iOS
            button.widthAnchor.constraint(equalToConstant: 42).isActive = true
        case .symbol(let sym) where sym == ".":
            // –¢–æ—á–∫–∞ - —É–º–µ–Ω—å—à–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            button.widthAnchor.constraint(equalToConstant: 32).isActive = true
        case .islamicPhrase, .islamicDua:
            // –ò—Å–ª–∞–º—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ - —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ
            if row.allSatisfy({
                if case .islamicPhrase = $0 { return true }
                if case .islamicDua = $0 { return true }
                return false
            }) {
                // –ï—Å–ª–∏ –≤–µ—Å—å —Ä—è–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –∏—Å–ª–∞–º—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫, –¥–µ–ª–∞–µ–º –∏—Ö —Ä–∞–≤–Ω—ã–º–∏
                for otherButton in buttons {
                    if otherButton != button {
                        button.widthAnchor.constraint(equalTo: otherButton.widthAnchor).isActive = true
                        break
                    }
                }
            } else {
                button.widthAnchor.constraint(greaterThanOrEqualToConstant: 80).isActive = true
            }
        default:
            // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—É–∫–≤/—Ü–∏—Ñ—Ä - —Ä–∞–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤ —Ä—è–¥—É
            let regularButtons = buttons.enumerated().compactMap { (index, btn) -> UIButton? in
                let keyType = row[index]
                switch keyType {
                case .letter, .number:
                    return btn
                case .symbol(let sym) where sym != ".":
                    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É –∏–∑ –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    return btn
                default:
                    return nil
                }
            }

            if regularButtons.count > 1 {
                for otherButton in regularButtons {
                    if otherButton != button {
                        button.widthAnchor.constraint(equalTo: otherButton.widthAnchor).isActive = true
                        break
                    }
                }
            } else {
                button.widthAnchor.constraint(greaterThanOrEqualToConstant: 32).isActive = true
            }
        }
    }

    private func createKeyButton(for keyType: KeyType, rowIndex: Int, keyIndex: Int) -> UIButton {
        let button = UIButton(type: .custom)
        button.translatesAutoresizingMaskIntoConstraints = false

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        setupButtonAppearance(button: button, keyType: keyType)

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞/–∏–∫–æ–Ω–∫–∏
        setupButtonContent(button: button, keyType: keyType)

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        button.addTarget(self, action: #selector(keyButtonTapped(_:)), for: .touchUpInside)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –≤ accessibilityIdentifier
        button.accessibilityIdentifier = keyTypeToString(keyType)

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ ABC
        if case .letter("ABC") = keyType {
            print("üîß Created ABC button with identifier: \(keyTypeToString(keyType))")
            print("üîß ABC button target: \(button.allTargets)")
        }

        return button
    }

    private func setupButtonAppearance(button: UIButton, keyType: KeyType) {
        // –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏
        switch keyType {
        case .letter, .number, .symbol:
            // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - –±–µ–ª—ã–π —Ñ–æ–Ω
            button.backgroundColor = UIColor.white
            button.setTitleColor(UIColor.black, for: .normal)
        case .shift, .delete, .numbers, .symbols:
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - —Å–µ—Ä—ã–π —Ñ–æ–Ω
            button.backgroundColor = UIColor(red: 0.68, green: 0.71, blue: 0.74, alpha: 1.0)
            button.setTitleColor(UIColor.black, for: .normal)
        case .letter("ABC"):
            // –ö–Ω–æ–ø–∫–∞ ABC - –≤ –∏—Å–ª–∞–º—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã, –≤ –æ–±—ã—á–Ω–æ–º - —Å–µ—Ä—ã–π
            if currentMode == .islamic {
                button.backgroundColor = colorManager.keyboardButtonColor
                button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
            } else {
                button.backgroundColor = UIColor(red: 0.68, green: 0.71, blue: 0.74, alpha: 1.0)
                button.setTitleColor(UIColor.black, for: .normal)
            }
        case .space, .returnKey:
            // –ü—Ä–æ–±–µ–ª –∏ Return - —Å–µ—Ä—ã–π —Ñ–æ–Ω
            button.backgroundColor = UIColor(red: 0.68, green: 0.71, blue: 0.74, alpha: 1.0)
            button.setTitleColor(UIColor.black, for: .normal)
        case .moon:
            // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ª–∞–º—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
            button.backgroundColor = colorManager.keyboardButtonColor
            button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
        case .globe:
            // –ö–Ω–æ–ø–∫–∞ —è–∑—ã–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
            button.backgroundColor = colorManager.keyboardButtonColor
            button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
        case .islamicPhrase, .islamicDua:
            // –ò—Å–ª–∞–º—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            button.backgroundColor = colorManager.keyboardButtonColor
            button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
        case .islamicToggle:
            // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –î—É–∞/–§—Ä–∞–∑—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
            button.backgroundColor = colorManager.keyboardButtonColor
            button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
        case .stickers:
            // –ö–Ω–æ–ø–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
            button.backgroundColor = colorManager.keyboardButtonColor
            button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
        case .stickerBack:
            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤ - —Å–µ—Ä—ã–π —Ñ–æ–Ω –¥–ª—è –±–µ–ª–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            button.backgroundColor = UIColor.systemGray5
            button.setTitleColor(.black, for: .normal)
        case .symbol(let sym) where sym == "Ô∑∫":
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Ô∑∫ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç —Ç–µ–º—ã
            button.backgroundColor = colorManager.keyboardButtonColor
            button.setTitleColor(colorManager.keyboardButtonTextColor, for: .normal)
        }

        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        button.layer.cornerRadius = 5
        button.layer.shadowColor = UIColor.black.cgColor
        button.layer.shadowOffset = CGSize(width: 0, height: 1)
        button.layer.shadowOpacity = 0.3
        button.layer.shadowRadius = 0

        // –®—Ä–∏—Ñ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—É–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –¥–ª—è —Ñ—Ä–∞–∑ —Ç–∞–∫–∂–µ
        switch keyType {
        case .letter, .number, .symbol:
            button.titleLabel?.font = UIFont.systemFont(ofSize: 22, weight: .light)
        case .islamicPhrase, .islamicDua:
            button.titleLabel?.font = UIFont.systemFont(ofSize: 14, weight: .medium)
        case .islamicToggle:
            button.titleLabel?.font = UIFont.systemFont(ofSize: 14, weight: .medium)
        case .stickers:
            button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        case .moon:
            button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .regular)
        default:
            button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        }

        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.minimumScaleFactor = 0.5
        button.titleLabel?.textAlignment = .center
    }

    private func setupButtonContent(button: UIButton, keyType: KeyType) {
        switch keyType {
        case .letter(let char):
            let displayChar = (isShiftPressed || isCapsLockOn) ? char.uppercased() : char.lowercased()
            button.setTitle(displayChar, for: .normal)
        case .number(let num):
            button.setTitle(num, for: .normal)
        case .symbol(let sym):
            button.setTitle(sym, for: .normal)
        case .space:
            let spaceTitle: String
            switch currentLanguage {
            case .english:
                spaceTitle = "space"
            case .russian:
                spaceTitle = "–ø—Ä–æ–±–µ–ª"
            case .kazakh:
                spaceTitle = "–±–æ—Å –æ—Ä—ã–Ω"
            case .arabic:
                spaceTitle = "ŸÖÿ≥ÿßŸÅÿ©"
            }
            button.setTitle(spaceTitle, for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 14, weight: .regular)
        case .delete:
            button.setTitle("‚å´", for: .normal)
        case .shift:
            button.setTitle("‚áß", for: .normal)
        case .returnKey:
            button.setTitle("‚èé", for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .regular)
        case .numbers:
            button.setTitle("123", for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        case .symbols:
            button.setTitle("#+=", for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .regular)
        case .letter("ABC"):
            // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É iOS - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
            var logoImage: UIImage?

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ KeyboardApp Assets
            logoImage = UIImage(named: "IOSKeyboardIcon")

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bundle
            if logoImage == nil {
                if let mainBundle = Bundle(identifier: "school.nfactorial.muslim.keyboard") {
                    logoImage = UIImage(named: "IOSKeyboardIcon", in: mainBundle, compatibleWith: nil)
                }
            }

            if let image = logoImage {
                let resizedImage = image.resized(to: CGSize(width: 24, height: 24))
                button.setImage(resizedImage, for: .normal)
                button.setTitle(nil, for: .normal)
                button.imageView?.contentMode = .scaleAspectFit
                button.imageView?.tintColor = nil
                print("‚úÖ ABC button configured with logo image")
            } else {
                // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±—É—Å –µ—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω
                button.setTitle("üåê", for: .normal)
                button.setImage(nil, for: .normal)
                print("‚ö†Ô∏è ABC button fallback to globe icon - logo not found")
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if currentMode == .islamic {
                button.backgroundColor = colorManager.keyboardButtonColor
            } else {
                button.backgroundColor = UIColor(red: 0.68, green: 0.71, blue: 0.74, alpha: 1.0)
            }
        case .globe:
            // –í –∏—Å–ª–∞–º—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
            if currentMode == .islamic {
                let languageText: String
                switch currentLanguage {
                case .english:
                    languageText = "EN"
                case .russian:
                    languageText = "RU"
                case .kazakh:
                    languageText = "KZ"
                case .arabic:
                    languageText = "AR"
                }
                button.setTitle(languageText, for: .normal)
                button.titleLabel?.font = UIFont.systemFont(ofSize: 12, weight: .medium)
            } else {
                button.setTitle("üåê", for: .normal)
            }
        case .moon:
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∏—Å–ª–∞–º—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            var logoImage: UIImage?

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ KeyboardApp Assets
            logoImage = UIImage(named: "KeyboardIcon")

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ bundle
            if logoImage == nil {
                if let mainBundle = Bundle(identifier: "school.nfactorial.muslim.keyboard") {
                    logoImage = UIImage(named: "KeyboardIcon", in: mainBundle, compatibleWith: nil)
                }
            }

            if let image = logoImage {
                let resizedImage = image.resized(to: CGSize(width: 24, height: 24))
                button.setImage(resizedImage, for: .normal)
                button.setTitle(nil, for: .normal)
                button.imageView?.contentMode = .scaleAspectFit
                button.imageView?.tintColor = nil
                print("‚úÖ KeyboardIcon loaded successfully")
            } else {
                // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É–Ω—É
                button.setTitle("üåô", for: .normal)
                print("‚ùå KeyboardIcon not found, using fallback")
            }
        case .islamicToggle:
            let title: String
            if islamicMode == .phrases {
                switch currentLanguage {
                case .english:
                    title = "Dua"
                case .russian:
                    title = "–î—É–∞"
                case .kazakh:
                    title = "–î“±“ì–∞"
                case .arabic:
                    title = "ÿØÿπÿßÿ°"
                }
            } else {
                switch currentLanguage {
                case .english:
                    title = "Phrases"
                case .russian:
                    title = "–§—Ä–∞–∑—ã"
                case .kazakh:
                    title = "–°”©–∑–¥–µ—Ä"
                case .arabic:
                    title = "ÿπÿ®ÿßÿ±ÿßÿ™"
                }
            }
            button.setTitle(title, for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 12, weight: .medium)
        case .islamicPhrase(let text):
            button.setTitle(text, for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 14, weight: .medium)
        case .islamicDua(let text):
            button.setTitle(text, for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 14, weight: .medium)
        case .stickers:
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º
            button.setTitle("üòä", for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 12, weight: .medium)
        case .stickerBack:
            // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Å—Ç–∏–∫–µ—Ä–æ–≤ - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞
            button.setTitle("‚Üê", for: .normal)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        }
    }

    private func keyTypeToString(_ keyType: KeyType) -> String {
        switch keyType {
        case .letter(let char): return "letter:\(char)"
        case .number(let num): return "number:\(num)"
        case .symbol(let sym): return "symbol:\(sym)"
        case .space: return "space"
        case .delete: return "delete"
        case .shift: return "shift"
        case .returnKey: return "return"
        case .numbers: return "numbers"
        case .symbols: return "symbols"
        case .letter("ABC"): return "abc"
        case .globe: return "globe"
        case .moon: return "moon"
        case .islamicPhrase(let text): return "phrase:\(text)"
        case .islamicDua(let text): return "dua:\(text)"
        case .islamicToggle: return "islamicToggle"
        case .stickers: return "stickers"
        case .stickerBack: return "stickerBack"
        }
    }

    private func stringToKeyType(_ string: String) -> KeyType {
        let components = string.split(separator: ":", maxSplits: 1)
        let type = String(components[0])
        let value = components.count > 1 ? String(components[1]) : ""

        switch type {
        case "letter": return .letter(value)
        case "number": return .number(value)
        case "symbol": return .symbol(value)
        case "space": return .space
        case "delete": return .delete
        case "shift": return .shift
        case "return": return .returnKey
        case "numbers": return .numbers
        case "symbols": return .symbols
        case "abc": return .letter("ABC")
        case "globe": return .globe
        case "moon": return .moon
        case "phrase": return .islamicPhrase(value)
        case "dua": return .islamicDua(value)
        case "islamicToggle": return .islamicToggle
        case "stickers": return .stickers
        case "stickerBack": return .stickerBack
        default: return .letter("A")
        }
    }

    // MARK: - Actions
    @objc private func keyButtonTapped(_ sender: UIButton) {
        guard let identifier = sender.accessibilityIdentifier else {
            print("‚ùå Button tapped but no identifier found")
            return
        }
        let keyType = stringToKeyType(identifier)
        print("üîò Button tapped: \(identifier)")

        switch keyType {
        case .letter("ABC"):
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É iOS (—Å–∏—Å—Ç–µ–º–Ω—É—é)
            print("üîÑ ABC button tapped - switching to next iOS keyboard")
            print("üîß Available input modes: \(textDocumentProxy.documentInputMode?.primaryLanguage ?? "unknown")")
            print("üîß needsInputModeSwitchKey: \(needsInputModeSwitchKey)")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ
            if hasMultipleKeyboards() {
                // –ï—Å—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                print("üîß Multiple keyboards available - using advanceToNextInputMode")
                advanceToNextInputMode()
            } else {
                // –ù–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±—É–∫–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                print("üîß Only our keyboard available - switching to letters mode")
                if currentMode == .islamic {
                    // –ï—Å–ª–∏ –º—ã –≤ –∏—Å–ª–∞–º—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±—ã—á–Ω—ã–µ –±—É–∫–≤—ã
                    currentMode = .letters
                    updateKeyboard()

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                    let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
                    impactFeedback.impactOccurred()
                } else {
                    // –ï—Å–ª–∏ —É–∂–µ –≤ –±—É–∫–≤–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ –∏—Å–ª–∞–º—Å–∫–∏–π —Ä–µ–∂–∏–º
                    print("üîß In letters mode - switching to Islamic mode")
                    currentMode = .islamic
                    updateKeyboard()

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–∫—Ç–∏–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                    let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
                    impactFeedback.impactOccurred()
                }
            }

            print("‚úÖ ABC button action completed")

        case .letter(let char):
            let displayChar = (isShiftPressed || isCapsLockOn) ? char.uppercased() : char.lowercased()
            textDocumentProxy.insertText(displayChar)
            lastInsertedText = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–±—ã—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Shift –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –±—É–∫–≤—ã (–µ—Å–ª–∏ –Ω–µ CapsLock)
            if isShiftPressed && !isCapsLockOn {
                isShiftPressed = false
                updateKeyboard()
            }

        case .number(let num):
            textDocumentProxy.insertText(num)
            lastInsertedText = nil

        case .symbol(let sym):
            textDocumentProxy.insertText(sym)
            lastInsertedText = nil

        case .space:
            textDocumentProxy.insertText(" ")
            lastInsertedText = nil

        case .delete:
            handleDeleteTap()

        case .shift:
            handleShiftTap()

        case .returnKey:
            textDocumentProxy.insertText("\n")

        case .numbers:
            currentMode = .numbers
            updateKeyboard()

        case .symbols:
            currentMode = .symbols
            updateKeyboard()

        case .globe:
            toggleLanguage()
            // –ï—Å–ª–∏ –º—ã –≤ –∏—Å–ª–∞–º—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if currentMode == .islamic {
                createIslamicKeyboard()
            }

        case .moon:
            toggleIslamicMode()

        case .islamicPhrase(let text):
            handleIslamicPhraseTap(text)

        case .islamicDua(let text):
            handleIslamicDuaTap(text)

        case .islamicToggle:
            toggleIslamicContent()

        case .stickers:
            showStickerLibrary()

        case .stickerBack:
            returnToIslamicKeyboard()
        }

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        let impactFeedback = UIImpactFeedbackGenerator(style: .light)
        impactFeedback.impactOccurred()
    }

    private func toggleIslamicContent() {
        islamicMode = islamicMode == .phrases ? .duas : .phrases
        if currentMode == .islamic {
            createIslamicKeyboard()
        }
    }

    private func showStickerLibrary() {
        // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        if currentMode == .islamic {
            createStickerKeyboard()
        }
    }

    private func createStickerKeyboard() {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        updateKeyboardHeight(300) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 300 –ø–∏–∫—Å–µ–ª–µ–π

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        keyboardView.subviews.forEach { $0.removeFromSuperview() }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ UserDefaults
        stickerManager.loadStickers()

        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å—Ç–∏–∫–µ—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if stickerManager.savedStickers.isEmpty {
            print("üé® No stickers found, creating demo stickers...")
            stickerManager.createDemoStickersForKeyboard()
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        let stickers = stickerManager.getStickersForKeyboard()

        print("üé® Creating sticker keyboard with \(stickers.count) selected stickers")
        print("üé® Total saved stickers: \(stickerManager.savedStickers.count)")
        print("üé® Selected stickers for keyboard: \(stickers.count)")

        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å—Ç–∏–∫–µ—Ä–µ
        for (index, sticker) in stickers.enumerated() {
            print("üé® Sticker \(index): '\(sticker.prompt)' (ID: \(sticker.id))")
        }

        if stickers.isEmpty {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
            createEmptyStickerView()
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã
            createStickerGrid(stickers: stickers)
        }
    }

    private func createEmptyStickerView() {
        let emptyView = UIView()
        emptyView.translatesAutoresizingMaskIntoConstraints = false
        emptyView.backgroundColor = .white
        keyboardView.addSubview(emptyView)

        let messageLabel = UILabel()
        messageLabel.translatesAutoresizingMaskIntoConstraints = false

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        let totalStickers = stickerManager.savedStickers.count
        let debugText = "üé® DEBUG INFO\n\nTotal saved stickers: \(totalStickers)\nFiltered stickers: 0\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ\n–≤–∞—à –ø–µ—Ä–≤—ã–π –∏—Å–ª–∞–º—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä!"

        messageLabel.text = debugText
        messageLabel.textColor = .darkGray
        messageLabel.textAlignment = .center
        messageLabel.numberOfLines = 0
        messageLabel.font = UIFont.systemFont(ofSize: 12, weight: .medium)
        emptyView.addSubview(messageLabel)

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞
        let backButton = createKeyButton(for: .stickerBack, rowIndex: 0, keyIndex: 0)
        emptyView.addSubview(backButton)

        NSLayoutConstraint.activate([
            emptyView.topAnchor.constraint(equalTo: keyboardView.topAnchor),
            emptyView.leadingAnchor.constraint(equalTo: keyboardView.leadingAnchor),
            emptyView.trailingAnchor.constraint(equalTo: keyboardView.trailingAnchor),
            emptyView.bottomAnchor.constraint(equalTo: keyboardView.bottomAnchor),

            messageLabel.centerXAnchor.constraint(equalTo: emptyView.centerXAnchor),
            messageLabel.centerYAnchor.constraint(equalTo: emptyView.centerYAnchor, constant: -20),

            backButton.bottomAnchor.constraint(equalTo: emptyView.bottomAnchor, constant: -10),
            backButton.leadingAnchor.constraint(equalTo: emptyView.leadingAnchor, constant: 10),
            backButton.widthAnchor.constraint(equalToConstant: 80),
            backButton.heightAnchor.constraint(equalToConstant: 40)
        ])
    }

    private func createStickerGrid(stickers: [SavedSticker]) {

        let containerView = UIView()
        containerView.translatesAutoresizingMaskIntoConstraints = false
        containerView.backgroundColor = .white
        keyboardView.addSubview(containerView)

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        let headerLabel = UILabel()
        headerLabel.translatesAutoresizingMaskIntoConstraints = false
        headerLabel.text = "üé® Stickers: \(stickers.count) / \(stickerManager.savedStickers.count)"
        headerLabel.textColor = .darkGray
        headerLabel.textAlignment = .center
        headerLabel.font = UIFont.systemFont(ofSize: 12, weight: .medium)
        containerView.addSubview(headerLabel)

        // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª-–≤—å—é –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.showsVerticalScrollIndicator = true // –í–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
        scrollView.isScrollEnabled = true
        scrollView.bounces = true
        containerView.addSubview(scrollView)

        let contentView = UIView()
        contentView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(contentView)

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let stickersPerRow = 4
        let stickerSize: CGFloat = 60
        let spacing: CGFloat = 12
        let margin: CGFloat = 16

        var stickerButtons: [UIButton] = []

        print("üé® Creating \(stickers.count) sticker buttons...")

        for (index, sticker) in stickers.enumerated() {
            print("üé® Creating button \(index) for sticker: '\(sticker.prompt)'")
            let button = UIButton(type: .custom)
            button.translatesAutoresizingMaskIntoConstraints = false
            button.tag = index

            // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∏–∫–µ—Ä–∞
            let displayText = sticker.prompt.count > 8 ? String(sticker.prompt.prefix(8)) + "..." : sticker.prompt
            button.setTitle(displayText, for: .normal)
            button.setTitleColor(.black, for: .normal)
            button.backgroundColor = UIColor.systemGreen.withAlphaComponent(0.3)
            button.titleLabel?.font = UIFont.systemFont(ofSize: 10, weight: .medium)
            button.titleLabel?.numberOfLines = 2
            button.titleLabel?.textAlignment = .center

            button.layer.cornerRadius = 8
            button.clipsToBounds = true
            button.layer.borderWidth = 1
            button.layer.borderColor = UIColor.systemGray3.cgColor

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            button.layer.shadowColor = UIColor.black.cgColor
            button.layer.shadowOffset = CGSize(width: 0, height: 1)
            button.layer.shadowOpacity = 0.1
            button.layer.shadowRadius = 2
            button.layer.masksToBounds = false

            // –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–∂–∞—Ç–∏—è
            button.addTarget(self, action: #selector(stickerButtonPressed(_:)), for: .touchDown)
            button.addTarget(self, action: #selector(stickerButtonReleased(_:)), for: [.touchUpInside, .touchUpOutside, .touchCancel])

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            button.addTarget(self, action: #selector(stickerButtonTapped(_:)), for: .touchUpInside)

            contentView.addSubview(button)
            stickerButtons.append(button)
            print("üé® Added button \(index) to contentView")
        }

        print("üé® Total buttons created and added: \(stickerButtons.count)")

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–µ–ª–æ—á–∫–∞
        let backButton = createKeyButton(for: .stickerBack, rowIndex: 0, keyIndex: 0)
        containerView.addSubview(backButton)

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        NSLayoutConstraint.activate([
            containerView.topAnchor.constraint(equalTo: keyboardView.topAnchor),
            containerView.leadingAnchor.constraint(equalTo: keyboardView.leadingAnchor),
            containerView.trailingAnchor.constraint(equalTo: keyboardView.trailingAnchor),
            containerView.bottomAnchor.constraint(equalTo: keyboardView.bottomAnchor),

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            headerLabel.topAnchor.constraint(equalTo: containerView.topAnchor, constant: 5),
            headerLabel.leadingAnchor.constraint(equalTo: containerView.leadingAnchor),
            headerLabel.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            headerLabel.heightAnchor.constraint(equalToConstant: 20),

            scrollView.topAnchor.constraint(equalTo: headerLabel.bottomAnchor, constant: 5),
            scrollView.leadingAnchor.constraint(equalTo: containerView.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: containerView.bottomAnchor, constant: -50),

            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),

            backButton.bottomAnchor.constraint(equalTo: containerView.bottomAnchor, constant: -5),
            backButton.leadingAnchor.constraint(equalTo: containerView.leadingAnchor, constant: 10),
            backButton.widthAnchor.constraint(equalToConstant: 80),
            backButton.heightAnchor.constraint(equalToConstant: 40)
        ])

        // –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∫–µ
        let rows = (stickers.count + stickersPerRow - 1) / stickersPerRow
        let contentHeight = CGFloat(rows) * (stickerSize + spacing) + margin

        print("üé® Grid layout: \(stickers.count) stickers, \(rows) rows, content height: \(contentHeight)")

        contentView.heightAnchor.constraint(equalToConstant: contentHeight).isActive = true

        for (index, button) in stickerButtons.enumerated() {
            let row = index / stickersPerRow
            let col = index % stickersPerRow

            let x = margin + CGFloat(col) * (stickerSize + spacing)
            let y = margin + CGFloat(row) * (stickerSize + spacing)

            print("üé® Button \(index): row=\(row), col=\(col), x=\(x), y=\(y)")

            NSLayoutConstraint.activate([
                button.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: x),
                button.topAnchor.constraint(equalTo: contentView.topAnchor, constant: y),
                button.widthAnchor.constraint(equalToConstant: stickerSize),
                button.heightAnchor.constraint(equalToConstant: stickerSize)
            ])
        }
    }

    @objc private func stickerButtonPressed(_ sender: UIButton) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è
        UIView.animate(withDuration: 0.1) {
            sender.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
            sender.alpha = 0.8
        }
    }

    @objc private func stickerButtonReleased(_ sender: UIButton) {
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è
        UIView.animate(withDuration: 0.1) {
            sender.transform = CGAffineTransform.identity
            sender.alpha = 1.0
        }
    }

    @objc private func stickerButtonTapped(_ sender: UIButton) {
        let index = sender.tag
        let stickers = stickerManager.getStickersForKeyboard()

        guard index < stickers.count else { return }

        let sticker = stickers[index]

        // –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG —Ñ–æ—Ä–º–∞—Ç–µ
        if let image = UIImage(data: sticker.imageData) {
            print("üé® Processing sticker: '\(sticker.prompt)' as PNG image")
            insertStickerImage(image)
        } else {
            // Fallback - –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º PNG
            print("üé® No image data found, inserting text fallback")
            textDocumentProxy.insertText("üé® \(sticker.prompt) [PNG]")
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å–ª–∞–º—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        createIslamicKeyboard()

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()
    }

    private func insertStickerImage(_ image: UIImage) {
        print("üé® Attempting to insert sticker image as PNG")

        // –ú–µ—Ç–æ–¥ 1: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π API –¥–ª—è iOS 13+
        if #available(iOS 13.0, *) {
            insertImageWithModernAPI(image)
            return
        }

        // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ UIPasteboard
        if insertImageViaPasteboard(image) {
            print("üé® Sticker inserted via pasteboard")
            return
        }

        // –ú–µ—Ç–æ–¥ 3: –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NSTextAttachment (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if insertImageViaTextAttachment(image) {
            print("üé® Sticker inserted via text attachment")
            return
        }

        // –ú–µ—Ç–æ–¥ 4: Fallback - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Ñ–∞–π–ª –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        insertImageViaPhotosLibrary(image)
    }

    private func insertImageViaPasteboard(_ image: UIImage) -> Bool {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ PNG –¥–∞–Ω–Ω—ã–µ
        guard let pngData = image.pngData() else {
            print("üé® Failed to convert image to PNG data")
            return false
        }

        // –°–æ–∑–¥–∞–µ–º NSItemProvider –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let itemProvider = NSItemProvider(item: pngData as NSData, typeIdentifier: "public.png")

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
        let pasteboard = UIPasteboard.general
        pasteboard.itemProviders = [itemProvider]

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
        pasteboard.image = image

        // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (iOS 10+)
        if #available(iOS 10.0, *) {
            // –°–æ–∑–¥–∞–µ–º NSTextAttachment –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
            let attachment = NSTextAttachment()
            attachment.image = image

            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            let maxSize: CGFloat = 120
            let aspectRatio = image.size.width / image.size.height
            let newSize: CGSize

            if aspectRatio > 1 {
                // –®–∏—Ä–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                newSize = CGSize(width: maxSize, height: maxSize / aspectRatio)
            } else {
                // –í—ã—Å–æ–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                newSize = CGSize(width: maxSize * aspectRatio, height: maxSize)
            }

            attachment.bounds = CGRect(origin: .zero, size: newSize)
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
        if textDocumentProxy.hasText {
            textDocumentProxy.insertText(" ")
        }

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ PNG
        let fileSizeKB = Double(pngData.count) / 1024.0
        let sizeText = fileSizeKB > 1 ? String(format: "%.1fKB", fileSizeKB) : "\(pngData.count)B"
        textDocumentProxy.insertText("üñºÔ∏è PNG (\(sizeText))")

        print("üé® Image saved to pasteboard as PNG (\(pngData.count) bytes, \(sizeText))")
        return true
    }

    private func insertImageViaTextAttachment(_ image: UIImage) -> Bool {
        // –°–æ–∑–¥–∞–µ–º NSTextAttachment —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        let attachment = NSTextAttachment()
        attachment.image = image

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100x100 –ø–∏–∫—Å–µ–ª–µ–π)
        let imageSize = CGSize(width: 100, height: 100)
        attachment.bounds = CGRect(origin: .zero, size: imageSize)

        // –°–æ–∑–¥–∞–µ–º attributed string —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        let attributedString = NSAttributedString(attachment: attachment)

        // –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å attributed string
        // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —ç—Ç–æ
        if textDocumentProxy is UITextInput & UITextInputTraits {
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
            textDocumentProxy.insertText(attributedString.string)
            return true
        }

        return false
    }

    private func insertImageViaPhotosLibrary(_ image: UIImage) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∫–∞–∫ PNG
        if let pngData = image.pngData() {
            let tempDir = FileManager.default.temporaryDirectory
            let fileName = "islamic_sticker_\(UUID().uuidString).png"
            let fileURL = tempDir.appendingPathComponent(fileName)

            do {
                try pngData.write(to: fileURL)
                print("üé® Sticker saved as PNG: \(fileURL.path)")

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                let pasteboard = UIPasteboard.general
                pasteboard.string = fileURL.absoluteString

                // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
                textDocumentProxy.insertText("üñºÔ∏è PNG")

            } catch {
                print("üé® Failed to save PNG file: \(error)")
                textDocumentProxy.insertText("üñºÔ∏è [–ò—Å–ª–∞–º—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä]")
            }
        } else {
            print("üé® Failed to convert image to PNG data")
            textDocumentProxy.insertText("üñºÔ∏è [–ò—Å–ª–∞–º—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä]")
        }
    }

    // MARK: - Advanced Image Insertion Methods

    private func insertImageWithModernAPI(_ image: UIImage) {
        // –î–ª—è iOS 13+ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ API
        if #available(iOS 13.0, *) {
            insertImageWithDragAndDrop(image)
        } else {
            _ = insertImageViaPasteboard(image)
        }
    }

    @available(iOS 13.0, *)
    private func insertImageWithDragAndDrop(_ image: UIImage) {
        // –°–æ–∑–¥–∞–µ–º NSItemProvider –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        guard let pngData = image.pngData() else { return }

        let itemProvider = NSItemProvider()
        itemProvider.registerDataRepresentation(forTypeIdentifier: "public.png", visibility: .all) { completion in
            completion(pngData, nil)
            return nil
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º API
        UIPasteboard.general.itemProviders = [itemProvider]

        // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ PNG
        let fileSizeKB = Double(pngData.count) / 1024.0
        let sizeText = fileSizeKB > 1 ? String(format: "%.1fKB", fileSizeKB) : "\(pngData.count)B"
        textDocumentProxy.insertText("üñºÔ∏è PNG (\(sizeText))")

        print("üé® Image prepared with modern API (iOS 13+) - PNG size: \(sizeText)")
    }

    private func handleDeleteTap() {
        if let lastText = lastInsertedText {
            // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É/–¥—É–∞
            for _ in 0..<lastText.count {
                textDocumentProxy.deleteBackward()
            }
            lastInsertedText = nil
        } else {
            // –û–±—ã—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            textDocumentProxy.deleteBackward()
        }
    }

    private func handleShiftTap() {
        if isShiftPressed {
            // –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –≤–∫–ª—é—á–∞–µ–º CapsLock
            isCapsLockOn = !isCapsLockOn
            isShiftPressed = isCapsLockOn
        } else {
            // –û–¥–∏–Ω–∞—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –≤–∫–ª—é—á–∞–µ–º Shift
            isShiftPressed = true
        }
        updateKeyboard()
    }
    //06. 06. 2025 Update keyboard 

    private func toggleLanguage() {
        languageManager.toggleLanguage()
        currentLanguage = languageManager.currentLanguage
        updateKeyboard()
    }

    private func toggleIslamicMode() {
        currentMode = (currentMode == .islamic) ? .letters : .islamic
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        keyboardView.subviews.forEach { $0.removeFromSuperview() }
        if currentMode == .islamic {
            createIslamicKeyboard()
        } else {
            createKeyRows()
        }
    }

    private func returnToIslamicKeyboard() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        updateKeyboardHeight(keyboardHeight)

        // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å–ª–∞–º—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        currentMode = .islamic
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–∑–¥–∞–µ–º –∏—Å–ª–∞–º—Å–∫—É—é
        keyboardView.subviews.forEach { $0.removeFromSuperview() }
        createIslamicKeyboard()
    }

    private func updateKeyboardHeight(_ height: CGFloat) {
        // –û–±–Ω–æ–≤–ª—è–µ–º constraint –≤—ã—Å–æ—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for constraint in self.view.constraints {
            if constraint.firstAttribute == .height {
                constraint.constant = height
                break
            }
        }
        self.view.layoutIfNeeded()
        print("üé® Updated keyboard height to: \(height)")
    }

    private func handleIslamicPhraseTap(_ displayText: String) {
        // –ù–∞—Ö–æ–¥–∏–º —Ñ—Ä–∞–∑—É –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É —Ç–µ–∫—Å—Ç—É
        let selectedPhrases = phrasesManager.selectedPhrases
        if let phrase = selectedPhrases.first(where: { $0.displayText(for: languageManager.currentLanguage) == displayText }) {
            let useArabic = languageManager.shouldUseArabicForCurrentLanguage()
            let textToInsert = phrase.insertText(for: languageManager.currentLanguage, useArabic: useArabic)
            textDocumentProxy.insertText(textToInsert)
            lastInsertedText = textToInsert
        }
    }

    private func handleIslamicDuaTap(_ displayText: String) {
        // –ù–∞—Ö–æ–¥–∏–º –¥—É–∞ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É —Ç–µ–∫—Å—Ç—É
        let selectedDuas = duaManager.selectedDuas
        if let dua = selectedDuas.first(where: { $0.displayText(for: languageManager.currentLanguage) == displayText }) {
            let useArabicForDua = languageManager.shouldUseArabicForDuaCurrentLanguage()
            let textToInsert = dua.insertText(for: languageManager.currentLanguage, useArabicForDua: useArabicForDua)
            textDocumentProxy.insertText(textToInsert)
            lastInsertedText = textToInsert
        }
    }

    private func updateKeyboard() {
        if currentMode == .islamic {
            createIslamicKeyboard()
        } else {
            createKeyRows()
        }
    }

    // MARK: - Refresh and Update Methods
    private func refreshKeyboardData() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UserDefaults
        phrasesManager.refreshData()
        duaManager.refreshData()
        languageManager.refreshLanguageFromMainApp()

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        updateKeyboard()
    }

    @objc private func colorThemeChanged() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É –∏–∑ UserDefaults
        colorManager.reloadThemeFromUserDefaults()
        print("üé® Color theme changed, recreating keyboard...")

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        updateKeyboard()
    }

    @objc private func stickerSettingsChanged() {
        print("üé® Sticker settings changed notification received")
        DispatchQueue.main.async {
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤
            if self.currentMode == .islamic {
                self.createIslamicKeyboard()
            }
        }
    }

    @objc private func stickerSelectionChanged() {
        print("üé® Sticker selection changed notification received")
        DispatchQueue.main.async {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å—Ç–∏–∫–µ—Ä–æ–≤
            if self.currentMode == .islamic {
                self.createIslamicKeyboard()
            }
        }
    }

    @objc private func stickerVisibilityChanged() {
        print("üé® Sticker visibility changed notification received")
        DispatchQueue.main.async {
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —Å—Ç–∏–∫–µ—Ä–æ–≤
            if self.currentMode == .islamic {
                self.createIslamicKeyboard()
            }
        }
    }

    private func updateAppearance() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if needsInputModeSwitchKey {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
    }

    // MARK: - Helper Methods
    private func hasMultipleKeyboards() -> Bool {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –¥—Ä—É–≥–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä

        // 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± iOS
        let hasInputModeSwitch = needsInputModeSwitchKey
        print("üîß needsInputModeSwitchKey: \(hasInputModeSwitch)")

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ textDocumentProxy
        let hasDocumentInputMode = textDocumentProxy.documentInputMode != nil
        print("üîß hasDocumentInputMode: \(hasDocumentInputMode)")

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        let hasFullKeyboardAccess = hasFullAccess
        print("üîß hasFullAccess: \(hasFullKeyboardAccess)")

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        return hasInputModeSwitch
    }

    // MARK: - Debug Methods
    private func debugResourceLoading() {
        print("üîç Debug: Checking available resources...")

        let currentBundle = Bundle(for: type(of: self))
        print("üîç Current bundle: \(currentBundle.bundleIdentifier ?? "unknown")")
        print("üîç Bundle path: \(currentBundle.bundlePath)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if let resourcePath = currentBundle.resourcePath {
            print("üîç Resource path: \(resourcePath)")

            // –ò—â–µ–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã
            let fileManager = FileManager.default
            do {
                let contents = try fileManager.contentsOfDirectory(atPath: resourcePath)
                let imageFiles = contents.filter { $0.hasSuffix(".png") || $0.hasSuffix(".jpg") }
                print("üîç Available image files: \(imageFiles)")
            } catch {
                print("‚ùå Error reading resource directory: \(error)")
            }
        }

        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å IOSKeyboardIcon —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        let methods = [
            ("Bundle.main", { UIImage(named: "IOSKeyboardIcon") }),
            ("Current bundle", { UIImage(named: "IOSKeyboardIcon", in: currentBundle, compatibleWith: nil) }),
            ("Main app bundle", {
                if let mainBundle = Bundle(identifier: "school.nfactorial.muslim.keyboard") {
                    return UIImage(named: "IOSKeyboardIcon", in: mainBundle, compatibleWith: nil)
                }
                return nil
            })
        ]

        for (methodName, loadMethod) in methods {
            if let image = loadMethod() {
                print("‚úÖ IOSKeyboardIcon loaded successfully using \(methodName)")
                print("   Image size: \(image.size)")
                return
            } else {
                print("‚ùå Failed to load IOSKeyboardIcon using \(methodName)")
            }
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        debugKeyboardVisibility()
    }

    private func debugKeyboardVisibility() {
        print("üîç === Keyboard Visibility Debug ===")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º bundle identifier
        let currentBundle = Bundle(for: type(of: self))
        print("üîß Extension Bundle ID: \(currentBundle.bundleIdentifier ?? "unknown")")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if let mainBundle = Bundle(identifier: "school.nfactorial.muslim.keyboard") {
            print("üîß Main App Bundle ID: \(mainBundle.bundleIdentifier ?? "unknown")")
            print("‚úÖ Main app bundle found")
        } else {
            print("‚ùå Main app bundle NOT found")
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Info.plist –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if let infoPlist = currentBundle.infoDictionary {
            print("üîß Extension Info.plist keys:")
            if let displayName = infoPlist["CFBundleDisplayName"] as? String {
                print("   Display Name: \(displayName)")
            }
            if let extensionDict = infoPlist["NSExtension"] as? [String: Any] {
                print("   NSExtension found")
                if let pointIdentifier = extensionDict["NSExtensionPointIdentifier"] as? String {
                    print("   Point Identifier: \(pointIdentifier)")
                }
                if let attributes = extensionDict["NSExtensionAttributes"] as? [String: Any] {
                    print("   Extension Attributes:")
                    for (key, value) in attributes {
                        print("     \(key): \(value)")
                    }
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        print("üîß Has Full Access: \(hasFullAccess)")
        print("üîß Needs Input Mode Switch: \(needsInputModeSwitchKey)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é iOS
        let systemVersion = UIDevice.current.systemVersion
        print("üîß iOS Version: \(systemVersion)")

        print("üîç === End Debug ===")
    }
}

// MARK: - UIImage Extension
extension UIImage {
    func resized(to size: CGSize) -> UIImage {
        let renderer = UIGraphicsImageRenderer(size: size)
        return renderer.image { _ in
            self.draw(in: CGRect(origin: .zero, size: size))
        }
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    static func createKeyboardIcon(size: CGSize, color: UIColor) -> UIImage {
        let renderer = UIGraphicsImageRenderer(size: size)
        return renderer.image { context in
            let ctx = context.cgContext

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç
            ctx.setFillColor(color.cgColor)
            ctx.setStrokeColor(color.cgColor)
            ctx.setLineWidth(1.5)

            // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            let keyboardRect = CGRect(x: 2, y: 6, width: size.width - 4, height: size.height - 8)
            let keyboardPath = UIBezierPath(roundedRect: keyboardRect, cornerRadius: 3)
            ctx.addPath(keyboardPath.cgPath)
            ctx.strokePath()

            // –†–∏—Å—É–µ–º –∫–ª–∞–≤–∏—à–∏
            let keyWidth: CGFloat = (keyboardRect.width - 8) / 3
            let keyHeight: CGFloat = (keyboardRect.height - 6) / 2

            for row in 0..<2 {
                for col in 0..<3 {
                    let x = keyboardRect.minX + 2 + CGFloat(col) * (keyWidth + 1)
                    let y = keyboardRect.minY + 2 + CGFloat(row) * (keyHeight + 1)
                    let keyRect = CGRect(x: x, y: y, width: keyWidth, height: keyHeight)
                    let keyPath = UIBezierPath(roundedRect: keyRect, cornerRadius: 1)
                    ctx.addPath(keyPath.cgPath)
                    ctx.fillPath()
                }
            }
        }
    }
}
