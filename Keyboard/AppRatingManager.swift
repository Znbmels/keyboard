//
//  AppRatingManager.swift
//  Keyboard
//
//  Created by Zainab on 18.07.2025.
//

import Foundation
import StoreKit
import SwiftUI

@MainActor
class AppRatingManager: ObservableObject {
    static let shared = AppRatingManager()

    // MARK: - Published Properties
    @Published var showRatingPopup = false

    // MARK: - UserDefaults Keys
    private enum Keys {
        static let hasCompletedOnboarding = "has_completed_onboarding"
        static let successfulStickerGenerations = "successful_sticker_generations"
        static let successfulPhraseUsages = "successful_phrase_usages"
        static let lastRatingRequestDate = "last_rating_request_date"
        static let hasRatedApp = "has_rated_app"
        static let ratingRequestCount = "rating_request_count"
        static let appLaunchCount = "app_launch_count"
        static let firstLaunchDate = "first_launch_date"
        static let neverAskForRating = "never_ask_for_rating"
    }
    
    // MARK: - Configuration
    private let minDaysBetweenRequests: Int = 30 // –ú–∏–Ω–∏–º—É–º 30 –¥–Ω–µ–π –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    private let maxRequestsPerYear: Int = 3 // –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –≥–æ–¥
    private let minAppUsageDays: Int = 3 // –ú–∏–Ω–∏–º—É–º 3 –¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    // MARK: - Trigger Thresholds
    private let stickerGenerationThreshold: Int = 3 // –ü–æ—Å–ª–µ 3 —É—Å–ø–µ—à–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    private let phraseUsageThreshold: Int = 10 // –ü–æ—Å–ª–µ 10 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Ñ—Ä–∞–∑
    private let appLaunchThreshold: Int = 5 // –ü–æ—Å–ª–µ 5 –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    private init() {
        setupFirstLaunchIfNeeded()
    }
    
    // MARK: - Setup
    private func setupFirstLaunchIfNeeded() {
        if UserDefaults.standard.object(forKey: Keys.firstLaunchDate) == nil {
            UserDefaults.standard.set(Date(), forKey: Keys.firstLaunchDate)
            print("üì± First app launch recorded")
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤
        let currentCount = UserDefaults.standard.integer(forKey: Keys.appLaunchCount)
        UserDefaults.standard.set(currentCount + 1, forKey: Keys.appLaunchCount)
        print("üì± App launch count: \(currentCount + 1)")
    }
    
    // MARK: - Event Tracking
    
    /// –û—Ç–º–µ—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
    func markOnboardingCompleted() {
        UserDefaults.standard.set(true, forKey: Keys.hasCompletedOnboarding)
        print("‚úÖ Onboarding completed")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞
        Task {
            await checkAndRequestRatingIfAppropriate(trigger: .onboardingCompleted)
        }
    }
    
    /// –û—Ç–º–µ—á–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∏–∫–µ—Ä–∞
    func markSuccessfulStickerGeneration() {
        let currentCount = UserDefaults.standard.integer(forKey: Keys.successfulStickerGenerations)
        let newCount = currentCount + 1
        UserDefaults.standard.set(newCount, forKey: Keys.successfulStickerGenerations)
        print("üé® Successful sticker generations: \(newCount)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if newCount >= stickerGenerationThreshold {
            Task {
                await checkAndRequestRatingIfAppropriate(trigger: .stickerGeneration(count: newCount))
            }
        }
    }
    
    /// –û—Ç–º–µ—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–∑—ã/–¥—É–∞
    func markPhraseUsage() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        syncPhraseUsageFromKeyboard()

        let currentCount = UserDefaults.standard.integer(forKey: Keys.successfulPhraseUsages)
        let newCount = currentCount + 1
        UserDefaults.standard.set(newCount, forKey: Keys.successfulPhraseUsages)
        print("üìù Phrase usages: \(newCount)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if newCount >= phraseUsageThreshold {
            Task {
                await checkAndRequestRatingIfAppropriate(trigger: .phraseUsage(count: newCount))
            }
        }
    }

    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ—Ä–∞–∑ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    func syncPhraseUsageFromKeyboard() {
        guard let sharedDefaults = UserDefaults(suiteName: "group.school.nfactorial.muslim.keyboard") else { return }

        let keyboardUsageCount = sharedDefaults.integer(forKey: "phrase_usage_count")
        let currentAppCount = UserDefaults.standard.integer(forKey: Keys.successfulPhraseUsages)

        if keyboardUsageCount > 0 {
            let totalCount = currentAppCount + keyboardUsageCount
            UserDefaults.standard.set(totalCount, forKey: Keys.successfulPhraseUsages)

            // –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sharedDefaults.set(0, forKey: "phrase_usage_count")
            sharedDefaults.synchronize()

            print("üîÑ Synced \(keyboardUsageCount) phrase usages from keyboard. Total: \(totalCount)")
        }
    }
    
    /// –û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    func markAppAsRated() {
        UserDefaults.standard.set(true, forKey: Keys.hasRatedApp)
        UserDefaults.standard.set(Date(), forKey: Keys.lastRatingRequestDate)
        print("‚≠ê App marked as rated")
    }
    
    // MARK: - Rating Request Logic
    
    private enum RatingTrigger {
        case onboardingCompleted
        case stickerGeneration(count: Int)
        case phraseUsage(count: Int)
        case appLaunches(count: Int)
        
        var description: String {
            switch self {
            case .onboardingCompleted:
                return "onboarding completed"
            case .stickerGeneration(let count):
                return "\(count) sticker generations"
            case .phraseUsage(let count):
                return "\(count) phrase usages"
            case .appLaunches(let count):
                return "\(count) app launches"
            }
        }
    }
    
    private func checkAndRequestRatingIfAppropriate(trigger: RatingTrigger) async {
        print("üîç Checking rating request eligibility for trigger: \(trigger.description)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
        guard shouldRequestRating() else {
            print("‚ùå Rating request not appropriate at this time")
            return
        }
        
        print("‚úÖ All conditions met, requesting rating")
        await requestRating()
    }
    
    private func shouldRequestRating() -> Bool {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ü–µ–Ω–∏–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if UserDefaults.standard.bool(forKey: Keys.hasRatedApp) {
            print("‚ùå User has already rated the app")
            return false
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å"
        if UserDefaults.standard.bool(forKey: Keys.neverAskForRating) {
            print("‚ùå User chose never to be asked for rating")
            return false
        }

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        guard UserDefaults.standard.bool(forKey: Keys.hasCompletedOnboarding) else {
            print("‚ùå Onboarding not completed yet")
            return false
        }
        
        // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if UserDefaults.standard.object(forKey: Keys.firstLaunchDate) == nil {
            UserDefaults.standard.set(Date(), forKey: Keys.firstLaunchDate)
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if let lastRequestDate = UserDefaults.standard.object(forKey: Keys.lastRatingRequestDate) as? Date {
            let daysSinceLastRequest = Calendar.current.dateComponents([.day], from: lastRequestDate, to: Date()).day ?? 0
            guard daysSinceLastRequest >= minDaysBetweenRequests else {
                print("‚ùå Too soon since last request: \(daysSinceLastRequest) days (need \(minDaysBetweenRequests))")
                return false
            }
        }
        
        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –≥–æ–¥
        let requestCount = UserDefaults.standard.integer(forKey: Keys.ratingRequestCount)
        guard requestCount < maxRequestsPerYear else {
            print("‚ùå Maximum requests per year reached: \(requestCount)")
            return false
        }
        
        // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ 3-–≥–æ –∑–∞–ø—É—Å–∫–∞)
        let launchCount = UserDefaults.standard.integer(forKey: Keys.appLaunchCount)
        guard launchCount >= 3 else {
            print("‚ùå Not enough app launches: \(launchCount)/3")
            return false
        }
        
        print("‚úÖ All rating request conditions satisfied")
        return true
    }
    
    private func requestRating() async {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
        let currentRequestCount = UserDefaults.standard.integer(forKey: Keys.ratingRequestCount)
        UserDefaults.standard.set(currentRequestCount + 1, forKey: Keys.ratingRequestCount)
        UserDefaults.standard.set(Date(), forKey: Keys.lastRatingRequestDate)

        print("‚≠ê Requesting app rating (request #\(currentRequestCount + 1))")

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        showRatingPopup = true
    }
    
    // MARK: - Manual Rating Request

    /// –†—É—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
    func requestRatingManually() async {
        print("‚≠ê Manual rating request")
        // –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã–≤–∞–µ–º App Store
        openAppStoreForRating()
    }

    // MARK: - Popup Actions

    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–û—Ü–µ–Ω–∏—Ç—å –≤ App Store"
    func handleRateButtonPressed() {
        print("‚≠ê User pressed Rate button")
        showRatingPopup = false
        markAppAsRated()

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º App Store –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        openAppStoreForRating()
    }

    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–µ —Å–µ–π—á–∞—Å"
    func handleNotNowPressed() {
        print("‚≠ê User pressed Not Now")
        showRatingPopup = false
        // –ù–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ
    }

    /// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ë–æ–ª—å—à–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å"
    func handleNeverAskPressed() {
        print("‚≠ê User pressed Never Ask Again")
        showRatingPopup = false
        UserDefaults.standard.set(true, forKey: Keys.neverAskForRating)
        UserDefaults.standard.set(Date(), forKey: Keys.lastRatingRequestDate)
    }

    /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç App Store –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private func openAppStoreForRating() {
        // –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ü–µ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Muslim AI Keyboard
        let appStoreURL = "https://apps.apple.com/kz/app/muslim-ai-keyboard/id6748057376?action=write-review"

        if let url = URL(string: appStoreURL) {
            Task { @MainActor in
                if await UIApplication.shared.canOpenURL(url) {
                    await UIApplication.shared.open(url)
                    print("‚úÖ Opening App Store for rating: \(appStoreURL)")
                } else {
                    print("‚ùå Cannot open App Store URL: \(appStoreURL)")
                    // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    let fallbackURL = "https://apps.apple.com/kz/app/muslim-ai-keyboard/id6748057376"
                    if let fallbackUrl = URL(string: fallbackURL) {
                        await UIApplication.shared.open(fallbackUrl)
                    }
                }
            }
        }
    }
    
    // MARK: - Debug Information
    
    func getDebugInfo() -> [String: Any] {
        return [
            "hasCompletedOnboarding": UserDefaults.standard.bool(forKey: Keys.hasCompletedOnboarding),
            "stickerGenerations": UserDefaults.standard.integer(forKey: Keys.successfulStickerGenerations),
            "phraseUsages": UserDefaults.standard.integer(forKey: Keys.successfulPhraseUsages),
            "appLaunches": UserDefaults.standard.integer(forKey: Keys.appLaunchCount),
            "hasRatedApp": UserDefaults.standard.bool(forKey: Keys.hasRatedApp),
            "requestCount": UserDefaults.standard.integer(forKey: Keys.ratingRequestCount),
            "lastRequestDate": UserDefaults.standard.object(forKey: Keys.lastRatingRequestDate) as? Date ?? "Never",
            "firstLaunchDate": UserDefaults.standard.object(forKey: Keys.firstLaunchDate) as? Date ?? "Unknown",
            "daysSinceFirstLaunch": {
                guard let firstLaunch = UserDefaults.standard.object(forKey: Keys.firstLaunchDate) as? Date else { return 0 }
                return Calendar.current.dateComponents([.day], from: firstLaunch, to: Date()).day ?? 0
            }()
        ]
    }
    
    // MARK: - Reset (for testing)
    
    func resetRatingData() {
        let keys = [Keys.hasCompletedOnboarding, Keys.successfulStickerGenerations, Keys.successfulPhraseUsages,
                   Keys.lastRatingRequestDate, Keys.hasRatedApp, Keys.ratingRequestCount, Keys.appLaunchCount, Keys.firstLaunchDate]
        
        keys.forEach { UserDefaults.standard.removeObject(forKey: $0) }
        setupFirstLaunchIfNeeded()
        print("üîÑ Rating data reset")
    }
}
