//
//  AppCoordinator.swift
//  Keyboard
//
//  Created by Zainab on 19.06.2025.
//

import SwiftUI

enum AppState {
    case onboarding
    case languageSelection
    case main
}

class AppCoordinator: ObservableObject {
    @Published var currentState: AppState = .onboarding
    @StateObject private var languageManager = LanguageManager.shared
    
    private let userDefaults = UserDefaults.standard
    private let onboardingCompletedKey = "onboarding_completed"
    private let languageSelectedKey = "language_selected"
    
    init() {
        print("üöÄ AppCoordinator: Initializing...")
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        resetOnboardingState()
        determineInitialState()
        print("üéØ AppCoordinator: Initial state set to \(currentState)")
    }

    private func resetOnboardingState() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        print("üîÑ AppCoordinator: Resetting onboarding state...")
        userDefaults.set(false, forKey: onboardingCompletedKey)
        userDefaults.set(false, forKey: languageSelectedKey)
        print("‚úÖ AppCoordinator: Onboarding state reset")
    }
    
    private func determineInitialState() {
        // –í–°–ï–ì–î–ê –∑–∞–ø—É—Å–∫–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –±–∏–ª–¥–∏–Ω–≥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        currentState = .onboarding

        // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:
        /*
        let onboardingCompleted = userDefaults.bool(forKey: onboardingCompletedKey)
        let languageSelected = userDefaults.bool(forKey: languageSelectedKey)

        if !onboardingCompleted {
            currentState = .onboarding
        } else if !languageSelected {
            currentState = .languageSelection
        } else {
            currentState = .main
        }
        */
    }
    
    func completeOnboarding() {
        print("‚úÖ AppCoordinator: Onboarding completed, moving to language selection")
        userDefaults.set(true, forKey: onboardingCompletedKey)
        currentState = .languageSelection
    }

    func completeLanguageSelection() {
        print("‚úÖ AppCoordinator: Language selection completed, moving to main")
        userDefaults.set(true, forKey: languageSelectedKey)
        currentState = .main
    }
    
    func resetToOnboarding() {
        userDefaults.set(false, forKey: onboardingCompletedKey)
        userDefaults.set(false, forKey: languageSelectedKey)
        currentState = .onboarding
    }
}

struct AppCoordinatorView: View {
    @StateObject private var coordinator = AppCoordinator()
    @StateObject private var languageManager = LanguageManager.shared
    
    var body: some View {
        Group {
            switch coordinator.currentState {
            case .onboarding:
                OnboardingView(onComplete: {
                    coordinator.completeOnboarding()
                })
                .onAppear {
                    print("üì± AppCoordinatorView: Showing onboarding")
                }

            case .languageSelection:
                LanguageSelectionView {
                    coordinator.completeLanguageSelection()
                }
                .onAppear {
                    print("üì± AppCoordinatorView: Showing language selection")
                }

            case .main:
                MainTabView()
                .onAppear {
                    print("üì± AppCoordinatorView: Showing main tab view")
                }
            }
        }
        .environmentLanguage(languageManager.currentLanguage)
        .animation(.easeInOut(duration: 0.5), value: coordinator.currentState)
    }
}
