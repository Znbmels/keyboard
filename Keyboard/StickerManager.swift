//
//  StickerManager.swift
//  Keyboard
//
//  Created by Zainab on 10.07.2025.
//

import Foundation
import UIKit

// MARK: - Sticker Model
struct SavedSticker: Codable, Identifiable {
    let id: String
    let prompt: String
    let contentType: String
    let imageData: Data
    let createdAt: Date
    let analysis: StickerAnalysisData?
    
    init(id: String = UUID().uuidString, prompt: String, contentType: String, imageData: Data, analysis: StickerAnalysisData? = nil) {
        self.id = id
        self.prompt = prompt
        self.contentType = contentType
        self.imageData = imageData
        self.createdAt = Date()
        self.analysis = analysis
    }
}

struct StickerAnalysisData: Codable {
    let contentType: String
    let meaning: String
    let emotion: String
    let context: String
    let recommendedStyle: String
    let recommendedColors: [String]
    let hasUserColorRequest: Bool
}

// MARK: - Sticker Manager
@MainActor
class StickerManager: ObservableObject {
    static let shared = StickerManager()
    
    @Published var savedStickers: [SavedSticker] = []
    
    private let userDefaults: UserDefaults
    private let stickersKey = "saved_stickers"
    private let maxStickers = 50 // –õ–∏–º–∏—Ç —Å—Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
    
    private init() {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º App Groups –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        self.userDefaults = UserDefaults(suiteName: "group.school.nfactorial.muslim.keyboard") ?? UserDefaults.standard
        loadStickers()
    }
    
    // MARK: - Public Methods
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä
    func saveSticker(prompt: String, contentType: String, imageData: Data, analysis: StickerAnalysisData? = nil) {
        print("üé® === STICKER MANAGER SAVE PROCESS STARTED ===")
        print("üìù Prompt: '\(prompt)'")
        print("üìä Content Type: '\(contentType)'")
        print("üì¶ Image Data Size: \(imageData.count) bytes")
        print("üîç Analysis: \(analysis != nil ? "present" : "nil")")
        print("üìä Current stickers count before save: \(savedStickers.count)")

        let sticker = SavedSticker(
            prompt: prompt,
            contentType: contentType,
            imageData: imageData,
            analysis: analysis
        )

        print("üÜî Generated sticker ID: \(sticker.id)")
        print("‚è∞ Created at: \(sticker.createdAt)")

        // Verify image data is valid before saving
        if imageData.isEmpty {
            print("‚ùå CRITICAL ERROR: Cannot save sticker - image data is empty!")
            print("üé® === STICKER MANAGER SAVE PROCESS FAILED ===")
            return
        }

        if UIImage(data: imageData) == nil {
            print("‚ùå CRITICAL ERROR: Cannot save sticker - image data is corrupted!")
            print("üé® === STICKER MANAGER SAVE PROCESS FAILED ===")
            return
        }

        print("‚úÖ Image data validation passed in StickerManager")

        // UI updates are already on main thread due to @MainActor
        print("üîÑ Executing on main thread...")
        print("üé® Adding sticker to savedStickers array...")
        print("üé® Array count before insert: \(savedStickers.count)")

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
        savedStickers.insert(sticker, at: 0)
        print("üé® Sticker inserted at index 0")
        print("üé® Array count after insert: \(savedStickers.count)")

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤
        if savedStickers.count > maxStickers {
            let oldCount = savedStickers.count
            savedStickers = Array(savedStickers.prefix(maxStickers))
            print("üé® Trimmed from \(oldCount) to max \(maxStickers) stickers")
        }

        print("üé® Final array count: \(savedStickers.count)")
        print("üé® First sticker prompt: '\(savedStickers.first?.prompt ?? "none")'")
        print("üé® First sticker ID: '\(savedStickers.first?.id ?? "none")'")

        // Force UI refresh by triggering objectWillChange
        print("üîÑ Triggering UI update...")
        objectWillChange.send()
        print("‚úÖ UI update triggered")

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ UserDefaults
        print("üíæ Saving to UserDefaults...")
        saveStickers()

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        print("üéØ Adding sticker to keyboard selection...")
        addStickerToKeyboardSelection(sticker.id)

        print("üé® === STICKER MANAGER SAVE PROCESS COMPLETED ===")
        print("‚úÖ –°—Ç–∏–∫–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: '\(prompt)' (\(formatFileSize(imageData.count)))")
        print("üìä Final stickers count: \(savedStickers.count)")
        print("üéØ Sticker automatically added to keyboard selection")
    }
    
    /// –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
    func deleteSticker(id: String) {
        savedStickers.removeAll { $0.id == id }
        saveStickers()

        print("üóëÔ∏è –°—Ç–∏–∫–µ—Ä —É–¥–∞–ª–µ–Ω: \(id)")
    }

    /// –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private func addStickerToKeyboardSelection(_ stickerId: String) {
        var selectedStickers: Set<String> = []

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
        if let data = userDefaults.data(forKey: "selected_stickers_for_keyboard"),
           let existing = try? JSONDecoder().decode(Set<String>.self, from: data) {
            selectedStickers = existing
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∏–∫–µ—Ä
        selectedStickers.insert(stickerId)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        do {
            let data = try JSONEncoder().encode(selectedStickers)
            userDefaults.set(data, forKey: "selected_stickers_for_keyboard")
            userDefaults.synchronize()
            print("üé® Sticker \(stickerId) added to keyboard selection")
        } catch {
            print("‚ùå Failed to save sticker selection: \(error)")
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –ø–æ ID
    func getSticker(id: String) -> SavedSticker? {
        return savedStickers.first { $0.id == id }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
    func getStickerImage(id: String) -> UIImage? {
        guard let sticker = getSticker(id: id) else { return nil }
        return UIImage(data: sticker.imageData)
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã
    func clearAllStickers() {
        savedStickers.removeAll()
        saveStickers()
        
        print("üßπ –í—Å–µ —Å—Ç–∏–∫–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã")
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    func getStatistics() -> (count: Int, totalSize: String, types: [String: Int]) {
        let totalBytes = savedStickers.reduce(0) { $0 + $1.imageData.count }
        let totalSize = formatFileSize(totalBytes)

        var types: [String: Int] = [:]
        for sticker in savedStickers {
            types[sticker.contentType, default: 0] += 1
        }

        return (savedStickers.count, totalSize, types)
    }

    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
    func validateStickerLibrary() -> (isValid: Bool, issues: [String]) {
        print("üîç === VALIDATING STICKER LIBRARY ===")
        var issues: [String] = []

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ UserDefaults —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –º–∞—Å—Å–∏–≤—É –≤ –ø–∞–º—è—Ç–∏
        if let data = userDefaults.data(forKey: stickersKey) {
            do {
                let savedStickersFromDefaults = try JSONDecoder().decode([SavedSticker].self, from: data)
                if savedStickersFromDefaults.count != savedStickers.count {
                    let issue = "Mismatch between memory (\(savedStickers.count)) and UserDefaults (\(savedStickersFromDefaults.count))"
                    issues.append(issue)
                    print("‚ùå \(issue)")
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–∫–µ—Ä –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                for (index, sticker) in savedStickers.enumerated() {
                    if sticker.imageData.isEmpty {
                        let issue = "Sticker at index \(index) has empty image data"
                        issues.append(issue)
                        print("‚ùå \(issue)")
                    }

                    if UIImage(data: sticker.imageData) == nil {
                        let issue = "Sticker at index \(index) has corrupted image data"
                        issues.append(issue)
                        print("‚ùå \(issue)")
                    }

                    if sticker.prompt.isEmpty {
                        let issue = "Sticker at index \(index) has empty prompt"
                        issues.append(issue)
                        print("‚ùå \(issue)")
                    }
                }

            } catch {
                let issue = "Failed to decode stickers from UserDefaults: \(error)"
                issues.append(issue)
                print("‚ùå \(issue)")
            }
        } else {
            if !savedStickers.isEmpty {
                let issue = "No data in UserDefaults but \(savedStickers.count) stickers in memory"
                issues.append(issue)
                print("‚ùå \(issue)")
            }
        }

        let isValid = issues.isEmpty
        print("üîç Library validation result: \(isValid ? "VALID" : "INVALID")")
        if !isValid {
            print("üîç Issues found: \(issues.count)")
            for issue in issues {
                print("   - \(issue)")
            }
        }
        print("üîç === VALIDATION COMPLETED ===")

        return (isValid, issues)
    }
    
    // MARK: - Server Sync Methods

    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    func syncWithServer() async {
        print("üîÑ Starting server sync...")
        print("üåê API Base URL: \(StickerAPIService.shared.baseURL)")
        print("üìä Current local stickers count: \(savedStickers.count)")

        do {
            let apiService = StickerAPIService.shared
            print("üîó Calling syncUserStickers endpoint...")
            let serverStickers = try await apiService.syncUserStickers(username: "ios_user")

            print("üì• Downloaded \(serverStickers.count) stickers from server")

            // Log each sticker
            for (index, sticker) in serverStickers.enumerated() {
                print("üìã Sticker \(index + 1):")
                print("   - ID: \(sticker.id)")
                print("   - Prompt: \(sticker.prompt)")
                print("   - Image URL: \(sticker.imageUrl)")
                print("   - Content Type: \(sticker.contentType)")
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ
            var newStickers: [SavedSticker] = []

            for serverSticker in serverStickers {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å—Ç–∏–∫–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ
                if !savedStickers.contains(where: { $0.id == serverSticker.id }) {
                    print("üì• Processing new sticker: \(serverSticker.prompt)")
                    print("üîó Image URL: \(serverSticker.imageUrl)")

                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    print("‚¨áÔ∏è Starting image download...")
                    if let imageData = await downloadImageData(from: serverSticker.imageUrl) {
                        print("‚úÖ Image downloaded successfully: \(imageData.count) bytes")
                        let analysis = serverSticker.analysis.map { serverAnalysis in
                            StickerAnalysisData(
                                contentType: serverAnalysis.contentType,
                                meaning: serverAnalysis.meaning,
                                emotion: serverAnalysis.emotion,
                                context: serverAnalysis.context,
                                recommendedStyle: "default",
                                recommendedColors: [],
                                hasUserColorRequest: false
                            )
                        }

                        let localSticker = SavedSticker(
                            id: serverSticker.id,
                            prompt: serverSticker.prompt,
                            contentType: serverSticker.contentType,
                            imageData: imageData,
                            analysis: analysis
                        )

                        newStickers.append(localSticker)
                        print("‚úÖ Sticker added to newStickers array")
                    } else {
                        print("‚ùå Failed to download image for sticker: \(serverSticker.prompt)")
                    }
                } else {
                    print("‚ÑπÔ∏è Sticker already exists locally: \(serverSticker.prompt)")
                }
            }

            if !newStickers.isEmpty {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (—É–∂–µ –Ω–∞ main thread –∏–∑-–∑–∞ @MainActor)
                savedStickers.insert(contentsOf: newStickers, at: 0)

                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤
                if savedStickers.count > maxStickers {
                    savedStickers = Array(savedStickers.prefix(maxStickers))
                }

                print("‚úÖ Added \(newStickers.count) new stickers to library")
                print("üìä Total stickers now: \(savedStickers.count)")

                // Force UI refresh
                objectWillChange.send()

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                saveStickers()
            } else {
                print("‚ÑπÔ∏è No new stickers to sync")
            }

        } catch {
            print("‚ùå Server sync failed: \(error)")
        }

        print("üîÑ Server sync completed. Final stickers count: \(savedStickers.count)")
    }

    private func downloadImageData(from urlString: String) async -> Data? {
        guard let url = URL(string: urlString) else {
            print("‚ùå Invalid image URL: \(urlString)")
            return nil
        }

        do {
            let (data, _) = try await URLSession.shared.data(from: url)
            print("‚úÖ Downloaded image: \(data.count) bytes")
            return data
        } catch {
            print("‚ùå Failed to download image: \(error)")
            return nil
        }
    }

    // MARK: - Private Methods

    private func loadStickers() {
        guard let data = userDefaults.data(forKey: stickersKey) else {
            print("üì± –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤")
            return
        }
        
        do {
            savedStickers = try JSONDecoder().decode([SavedSticker].self, from: data)
            print("üì± –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: \(savedStickers.count)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤: \(error)")
            savedStickers = []
        }
    }
    
    private func saveStickers() {
        print("üíæ === USERDEFAULTS SAVE PROCESS STARTED ===")
        print("üìä Attempting to save \(savedStickers.count) stickers")
        print("üîë UserDefaults key: '\(stickersKey)'")
        print("üè¢ UserDefaults suite: group.school.nfactorial.muslim.keyboard")

        do {
            print("üîÑ Encoding stickers to JSON...")
            let data = try JSONEncoder().encode(savedStickers)
            print("üì¶ Encoded data size: \(data.count) bytes")

            print("üíæ Setting data in UserDefaults...")
            userDefaults.set(data, forKey: stickersKey)

            print("üîÑ Synchronizing UserDefaults...")
            let syncResult = userDefaults.synchronize()
            print("üîÑ Synchronize result: \(syncResult)")

            print("‚úÖ –°—Ç–∏–∫–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: \(savedStickers.count)")

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            print("üîç Verifying save...")
            if let savedData = userDefaults.data(forKey: stickersKey) {
                print("‚úÖ Verification: Data saved successfully, size: \(savedData.count) bytes")

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                do {
                    let decodedStickers = try JSONDecoder().decode([SavedSticker].self, from: savedData)
                    print("‚úÖ Verification: Successfully decoded \(decodedStickers.count) stickers")
                    if let firstSticker = decodedStickers.first {
                        print("‚úÖ Verification: First sticker prompt: '\(firstSticker.prompt)'")
                    }
                } catch {
                    print("‚ùå Verification: Failed to decode saved data: \(error)")
                }
            } else {
                print("‚ùå CRITICAL ERROR: No data found after save!")
            }

            print("üíæ === USERDEFAULTS SAVE PROCESS COMPLETED ===")
        } catch {
            print("‚ùå === USERDEFAULTS SAVE PROCESS FAILED ===")
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤: \(error)")
            print("üîç Error type: \(type(of: error))")
            print("üìÑ Error description: \(error.localizedDescription)")
        }
    }
    
    private func formatFileSize(_ bytes: Int) -> String {
        let formatter = ByteCountFormatter()
        formatter.allowedUnits = [.useKB, .useMB]
        formatter.countStyle = .file
        return formatter.string(fromByteCount: Int64(bytes))
    }
}

// MARK: - Extensions for Keyboard Extension

extension StickerManager {
    /// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    func getStickersForKeyboard() -> [SavedSticker] {
        print("üé® getStickersForKeyboard called")
        print("üé® Total saved stickers: \(savedStickers.count)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —Å—Ç–∏–∫–µ—Ä—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        let stickersEnabled = userDefaults.object(forKey: "stickers_enabled_in_keyboard") as? Bool ?? true
        print("üé® Stickers enabled in keyboard: \(stickersEnabled)")
        guard stickersEnabled else {
            print("üé® Stickers disabled, returning empty array")
            return []
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –∏–∑ App Groups UserDefaults
        if let data = userDefaults.data(forKey: "selected_stickers_for_keyboard"),
           let selectedIds = try? JSONDecoder().decode(Set<String>.self, from: data) {

            print("üé® Found selected stickers data: \(selectedIds.count) IDs")
            print("üé® Selected IDs: \(Array(selectedIds))")

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã
            let selectedStickers = savedStickers.filter { selectedIds.contains($0.id) }
            print("üé® Keyboard: Found \(selectedStickers.count) selected stickers out of \(savedStickers.count) total")

            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ç–∏–∫–µ—Ä–µ
            for (index, sticker) in selectedStickers.enumerated() {
                print("üé® Selected sticker \(index): '\(sticker.prompt)' (ID: \(sticker.id))")
            }

            return selectedStickers
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç–∏–∫–µ—Ä—ã
            print("üé® Keyboard: No selection found, showing all \(savedStickers.count) stickers")
            return savedStickers
        }
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    func createStickerPreview(sticker: SavedSticker, size: CGSize = CGSize(width: 60, height: 60)) -> UIImage? {
        guard let originalImage = UIImage(data: sticker.imageData) else { return nil }
        
        let renderer = UIGraphicsImageRenderer(size: size)
        return renderer.image { context in
            // –†–∏—Å—É–µ–º —Ñ–æ–Ω
            UIColor.systemBackground.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
            let imageRect = CGRect(
                x: 4,
                y: 4,
                width: size.width - 8,
                height: size.height - 8
            )
            originalImage.draw(in: imageRect)
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–º–∫—É
            UIColor.systemGray4.setStroke()
            let path = UIBezierPath(roundedRect: CGRect(origin: .zero, size: size), cornerRadius: 8)
            path.lineWidth = 1
            path.stroke()
        }
    }
}

// MARK: - Demo Data (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
extension StickerManager {
    func addDemoStickers() {
        print("üé® Starting to add demo stickers...")
        // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        let demoPrompts = [
            ("ÿ®Ÿêÿ≥ŸíŸÖŸê ÿßŸÑŸÑŸéŸëŸáŸê ÿßŸÑÿ±ŸéŸëÿ≠ŸíŸÖŸéŸ∞ŸÜŸê ÿßŸÑÿ±ŸéŸëÿ≠ŸêŸäŸÖŸê", "TEXTUAL"),
            ("ÿßŸÑŸíÿ≠ŸéŸÖŸíÿØŸè ŸÑŸêŸÑŸéŸëŸáŸê", "TEXTUAL"),
            ("ŸÖÿ≥ÿ¨ÿØ ÿ™ÿ≠ÿ™ ÿßŸÑŸÇŸÖÿ±", "VISUAL"),
            ("ÿßŸÑŸáŸÑÿßŸÑ ŸàÿßŸÑŸÜÿ¨ŸÖÿ©", "VISUAL")
        ]

        for (index, (prompt, type)) in demoPrompts.enumerated() {
            print("üé® Creating demo sticker \(index + 1)/\(demoPrompts.count): \(prompt)")
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            let image = createDemoImage(text: prompt)
            if let imageData = image.pngData() {
                print("üé® Image data created, size: \(imageData.count) bytes")
                let analysis = StickerAnalysisData(
                    contentType: type,
                    meaning: "Demo sticker",
                    emotion: "peaceful",
                    context: "demo",
                    recommendedStyle: "Clean",
                    recommendedColors: ["green", "gold"],
                    hasUserColorRequest: false
                )
                saveSticker(prompt: prompt, contentType: type, imageData: imageData, analysis: analysis)
            } else {
                print("‚ùå Failed to create image data for: \(prompt)")
            }
        }
        print("üé® Finished adding demo stickers. Total stickers: \(savedStickers.count)")
    }
    
    private func createDemoImage(text: String) -> UIImage {
        let size = CGSize(width: 200, height: 200)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            // –§–æ–Ω
            UIColor.systemGreen.setFill()
            context.fill(CGRect(origin: .zero, size: size))
            
            // –¢–µ–∫—Å—Ç
            let attributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 24, weight: .bold),
                .foregroundColor: UIColor.white
            ]
            
            let attributedText = NSAttributedString(string: text, attributes: attributes)
            let textSize = attributedText.size()
            let textRect = CGRect(
                x: (size.width - textSize.width) / 2,
                y: (size.height - textSize.height) / 2,
                width: textSize.width,
                height: textSize.height
            )
            
            attributedText.draw(in: textRect)
        }
    }
}
